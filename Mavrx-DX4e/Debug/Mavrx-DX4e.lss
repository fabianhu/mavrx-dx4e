
Mavrx-DX4e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001c12  00001ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  0080010e  0080010e  00001cb4  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ea  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000041d6  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056b  00000000  00000000  000061f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b51  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000092b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021c1  00000000  00000000  000098a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000ba66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 36       	cpi	r26, 0x63	; 99
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 93 03 	call	0x726	; 0x726 <main>
      9e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LEDOff>:
extern uint8_t noteInterruptable;
extern uint8_t mute;


void LEDOff(void) {
	PORTC |= 0x07;
      a6:	88 b1       	in	r24, 0x08	; 8
      a8:	87 60       	ori	r24, 0x07	; 7
      aa:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0x01;
      ac:	58 9a       	sbi	0x0b, 0	; 11
}
      ae:	08 95       	ret

000000b0 <slowLoop>:
	
}

void slowLoop(void) {
	// Read battery voltage
	ADMUX = 0x46;   // select chan 6
      b0:	86 e4       	ldi	r24, 0x46	; 70
      b2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= 0x40; // start
      b6:	80 91 7a 00 	lds	r24, 0x007A
      ba:	80 64       	ori	r24, 0x40	; 64
      bc:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0x40); // wait for completion
      c0:	80 91 7a 00 	lds	r24, 0x007A
      c4:	86 fd       	sbrc	r24, 6
      c6:	fc cf       	rjmp	.-8      	; 0xc0 <slowLoop+0x10>
	uint8_t level = ADC >> 2; // note: level is now approx 26.1x the actual voltage
      c8:	80 91 78 00 	lds	r24, 0x0078
      cc:	90 91 79 00 	lds	r25, 0x0079
      d0:	96 95       	lsr	r25
      d2:	87 95       	ror	r24
      d4:	96 95       	lsr	r25
      d6:	87 95       	ror	r24
	
	// Battery level pulse speeds
	if(level > 150) battPulse = 1; // slow pulse
      d8:	87 39       	cpi	r24, 0x97	; 151
      da:	10 f0       	brcs	.+4      	; 0xe0 <slowLoop+0x30>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	03 c0       	rjmp	.+6      	; 0xe6 <slowLoop+0x36>
	else if(level > 137) battPulse = 2;
      e0:	8a 38       	cpi	r24, 0x8A	; 138
      e2:	20 f0       	brcs	.+8      	; 0xec <slowLoop+0x3c>
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	80 93 3e 01 	sts	0x013E, r24
      ea:	32 c0       	rjmp	.+100    	; 0x150 <slowLoop+0xa0>
	else if(level > 120) battPulse = 4;
      ec:	89 37       	cpi	r24, 0x79	; 121
      ee:	10 f0       	brcs	.+4      	; 0xf4 <slowLoop+0x44>
      f0:	84 e0       	ldi	r24, 0x04	; 4
      f2:	f9 cf       	rjmp	.-14     	; 0xe6 <slowLoop+0x36>
	else {
		battPulse = 24; // very fast pulses
      f4:	88 e1       	ldi	r24, 0x18	; 24
      f6:	80 93 3e 01 	sts	0x013E, r24
		
		if(noteBuffer[noteCounter] == 0) {
      fa:	e0 91 45 01 	lds	r30, 0x0145
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	ea 5b       	subi	r30, 0xBA	; 186
     102:	fe 4f       	sbci	r31, 0xFE	; 254
     104:	80 81       	ld	r24, Z
     106:	88 23       	and	r24, r24
     108:	19 f5       	brne	.+70     	; 0x150 <slowLoop+0xa0>
			noteBuffer[0] = NOTEPAUSE;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 46 01 	sts	0x0146, r24
			noteBuffer[1] = NOTEPAUSE;
     110:	80 93 47 01 	sts	0x0147, r24
			noteBuffer[2] = NOTEPAUSE;
     114:	80 93 48 01 	sts	0x0148, r24
			noteBuffer[3] = NOTEPAUSE;
     118:	80 93 49 01 	sts	0x0149, r24
			noteBuffer[4] = NOTEPAUSE;
     11c:	80 93 4a 01 	sts	0x014A, r24
			noteBuffer[5] = NOTEPAUSE;
     120:	80 93 4b 01 	sts	0x014B, r24
			noteBuffer[6] = NOTEPAUSE;
     124:	80 93 4c 01 	sts	0x014C, r24
			noteBuffer[7] = NOTEPAUSE;
     128:	80 93 4d 01 	sts	0x014D, r24
			noteBuffer[8] = NOTEPAUSE;
     12c:	80 93 4e 01 	sts	0x014E, r24
			noteBuffer[9] = NOTE5C;
     130:	9f ee       	ldi	r25, 0xEF	; 239
     132:	90 93 4f 01 	sts	0x014F, r25
			noteBuffer[10] = NOTE5C;
     136:	90 93 50 01 	sts	0x0150, r25
			noteBuffer[11] = NOTE5CS;
     13a:	91 ee       	ldi	r25, 0xE1	; 225
     13c:	90 93 51 01 	sts	0x0151, r25
			noteBuffer[12] = NOTE5CS;
     140:	90 93 52 01 	sts	0x0152, r25
			noteBuffer[13] = NOTESTOP;
     144:	10 92 53 01 	sts	0x0153, r1
			noteCounter = 0;
     148:	10 92 45 01 	sts	0x0145, r1
			noteInterruptable = 1;
     14c:	80 93 5a 01 	sts	0x015A, r24
		}
	}
	
	// Check trainer plug plug
	static uint8_t trainerPluggedPrev;
	trainerPlugged = TRAINERPIN;
     150:	99 b1       	in	r25, 0x09	; 9
     152:	92 95       	swap	r25
     154:	91 70       	andi	r25, 0x01	; 1
     156:	90 93 41 01 	sts	0x0141, r25
	if(trainerPlugged != trainerPluggedPrev) {
     15a:	80 91 18 01 	lds	r24, 0x0118
     15e:	98 17       	cp	r25, r24
     160:	89 f1       	breq	.+98     	; 0x1c4 <slowLoop+0x114>
		trainerPluggedPrev = trainerPlugged;
     162:	90 93 18 01 	sts	0x0118, r25
		if(trainerPlugged) {
     166:	99 23       	and	r25, r25
     168:	c1 f0       	breq	.+48     	; 0x19a <slowLoop+0xea>
			// Not Plugged IN
			if(noteInterruptable) {
     16a:	80 91 5a 01 	lds	r24, 0x015A
     16e:	88 23       	and	r24, r24
     170:	61 f0       	breq	.+24     	; 0x18a <slowLoop+0xda>
				noteBuffer[0] = NOTE6C;
     172:	97 e7       	ldi	r25, 0x77	; 119
     174:	90 93 46 01 	sts	0x0146, r25
				noteBuffer[1] = NOTE7C;
     178:	8c e3       	ldi	r24, 0x3C	; 60
     17a:	80 93 47 01 	sts	0x0147, r24
				noteBuffer[2] = NOTE6C;
     17e:	90 93 48 01 	sts	0x0148, r25
				noteBuffer[3] = NOTESTOP;
     182:	10 92 49 01 	sts	0x0149, r1
				noteCounter = 0;
     186:	10 92 45 01 	sts	0x0145, r1
			}
			if(transmitMode == 2 || transmitMode == 3) transmitMode = 0; // escape out of trainer mode
     18a:	80 91 17 01 	lds	r24, 0x0117
     18e:	82 50       	subi	r24, 0x02	; 2
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	c0 f4       	brcc	.+48     	; 0x1c4 <slowLoop+0x114>
     194:	10 92 17 01 	sts	0x0117, r1
     198:	15 c0       	rjmp	.+42     	; 0x1c4 <slowLoop+0x114>
		}
		else {
			// Plugged IN
			noteBuffer[0] = NOTE6C; // these notes interrupt the startup tune, this is by design
     19a:	87 e7       	ldi	r24, 0x77	; 119
     19c:	80 93 46 01 	sts	0x0146, r24
			noteBuffer[1] = NOTE6C;
     1a0:	80 93 47 01 	sts	0x0147, r24
			noteBuffer[2] = NOTE7C;
     1a4:	8c e3       	ldi	r24, 0x3C	; 60
     1a6:	80 93 48 01 	sts	0x0148, r24
			noteBuffer[3] = NOTESTOP;
     1aa:	10 92 49 01 	sts	0x0149, r1
			noteCounter = 0;
     1ae:	10 92 45 01 	sts	0x0145, r1
			noteInterruptable = 0;
     1b2:	10 92 5a 01 	sts	0x015A, r1
			if(transmitMode == 0) transmitMode = 3; // enter trainer mode
     1b6:	80 91 17 01 	lds	r24, 0x0117
     1ba:	88 23       	and	r24, r24
     1bc:	19 f4       	brne	.+6      	; 0x1c4 <slowLoop+0x114>
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	80 93 17 01 	sts	0x0117, r24
		}
	}
	
	// Beeps while toggling or binding beeps
	if(toggleCounter >= 4 || transmitMode == 1) {
     1c4:	80 91 43 01 	lds	r24, 0x0143
     1c8:	84 30       	cpi	r24, 0x04	; 4
     1ca:	20 f4       	brcc	.+8      	; 0x1d4 <slowLoop+0x124>
     1cc:	80 91 17 01 	lds	r24, 0x0117
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	21 f5       	brne	.+72     	; 0x21c <slowLoop+0x16c>
		if(noteBuffer[noteCounter] == 0) {
     1d4:	e0 91 45 01 	lds	r30, 0x0145
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	ea 5b       	subi	r30, 0xBA	; 186
     1dc:	fe 4f       	sbci	r31, 0xFE	; 254
     1de:	80 81       	ld	r24, Z
     1e0:	88 23       	and	r24, r24
     1e2:	e1 f4       	brne	.+56     	; 0x21c <slowLoop+0x16c>
			noteBuffer[0] = NOTEPAUSE;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 46 01 	sts	0x0146, r24
			noteBuffer[1] = NOTEPAUSE;
     1ea:	80 93 47 01 	sts	0x0147, r24
			noteBuffer[2] = NOTEPAUSE;
     1ee:	80 93 48 01 	sts	0x0148, r24
			noteBuffer[3] = NOTEPAUSE;
     1f2:	80 93 49 01 	sts	0x0149, r24
			noteBuffer[4] = NOTEPAUSE;
     1f6:	80 93 4a 01 	sts	0x014A, r24
			noteBuffer[5] = NOTEPAUSE;
     1fa:	80 93 4b 01 	sts	0x014B, r24
			noteBuffer[6] = NOTEPAUSE;
     1fe:	80 93 4c 01 	sts	0x014C, r24
			noteBuffer[7] = NOTEPAUSE;
     202:	80 93 4d 01 	sts	0x014D, r24
			noteBuffer[8] = NOTEPAUSE;
     206:	80 93 4e 01 	sts	0x014E, r24
			noteBuffer[9] = NOTE5C;
     20a:	9f ee       	ldi	r25, 0xEF	; 239
     20c:	90 93 4f 01 	sts	0x014F, r25
			noteBuffer[10] = NOTESTOP;
     210:	10 92 50 01 	sts	0x0150, r1
			noteCounter = 0;
     214:	10 92 45 01 	sts	0x0145, r1
			noteInterruptable = 1;
     218:	80 93 5a 01 	sts	0x015A, r24
		}
	}
	
	// Play sounds
	if(noteBuffer[noteCounter] > 0) {
     21c:	e0 91 45 01 	lds	r30, 0x0145
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	ea 5b       	subi	r30, 0xBA	; 186
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	88 23       	and	r24, r24
     22a:	69 f0       	breq	.+26     	; 0x246 <slowLoop+0x196>
		if(noteBuffer[noteCounter] == NOTEPAUSE) {
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	19 f4       	brne	.+6      	; 0x236 <slowLoop+0x186>
			stopNote();
     230:	0e 94 96 04 	call	0x92c	; 0x92c <stopNote>
     234:	02 c0       	rjmp	.+4      	; 0x23a <slowLoop+0x18a>
		}
		else {
			playNote(noteBuffer[noteCounter]);
     236:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
		}
		noteCounter++;
     23a:	80 91 45 01 	lds	r24, 0x0145
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	80 93 45 01 	sts	0x0145, r24
     244:	08 95       	ret
	}
	else {
		stopNote();
     246:	0e 94 96 04 	call	0x92c	; 0x92c <stopNote>
		noteInterruptable = 1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 5a 01 	sts	0x015A, r24
     250:	08 95       	ret

00000252 <fastLoop>:
		}
	}
}


void fastLoop(void) {
     252:	1f 93       	push	r17
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	2c 97       	sbiw	r28, 0x0c	; 12
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
	uint16_t outch[6];
	// Output to radio
	
	sticksProcessRaw(rawstickvalues); //no more raw after that
     268:	86 e3       	ldi	r24, 0x36	; 54
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 a6 0c 	call	0x194c	; 0x194c <sticksProcessRaw>
	
	uint16_t elevV = elevToggle ? 0x3ff - (uint16_t)rawstickvalues[0] : (uint16_t)rawstickvalues[0];
     270:	80 91 32 01 	lds	r24, 0x0132
     274:	20 91 36 01 	lds	r18, 0x0136
     278:	30 91 37 01 	lds	r19, 0x0137
     27c:	88 23       	and	r24, r24
     27e:	29 f0       	breq	.+10     	; 0x28a <fastLoop+0x38>
     280:	6f ef       	ldi	r22, 0xFF	; 255
     282:	73 e0       	ldi	r23, 0x03	; 3
     284:	62 1b       	sub	r22, r18
     286:	73 0b       	sbc	r23, r19
     288:	01 c0       	rjmp	.+2      	; 0x28c <fastLoop+0x3a>
     28a:	b9 01       	movw	r22, r18
	uint16_t aileV = aileToggle ? 0x3ff - (uint16_t)rawstickvalues[1] : (uint16_t)rawstickvalues[1];
     28c:	80 91 35 01 	lds	r24, 0x0135
     290:	88 23       	and	r24, r24
     292:	49 f0       	breq	.+18     	; 0x2a6 <fastLoop+0x54>
     294:	af ef       	ldi	r26, 0xFF	; 255
     296:	b3 e0       	ldi	r27, 0x03	; 3
     298:	80 91 38 01 	lds	r24, 0x0138
     29c:	90 91 39 01 	lds	r25, 0x0139
     2a0:	a8 1b       	sub	r26, r24
     2a2:	b9 0b       	sbc	r27, r25
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <fastLoop+0x5c>
     2a6:	a0 91 38 01 	lds	r26, 0x0138
     2aa:	b0 91 39 01 	lds	r27, 0x0139
	uint16_t pitchV = throToggle ? 0x3ff - (uint16_t)rawstickvalues[2] : (uint16_t)rawstickvalues[2];
     2ae:	80 91 42 01 	lds	r24, 0x0142
     2b2:	88 23       	and	r24, r24
     2b4:	49 f0       	breq	.+18     	; 0x2c8 <fastLoop+0x76>
     2b6:	4f ef       	ldi	r20, 0xFF	; 255
     2b8:	53 e0       	ldi	r21, 0x03	; 3
     2ba:	80 91 3a 01 	lds	r24, 0x013A
     2be:	90 91 3b 01 	lds	r25, 0x013B
     2c2:	48 1b       	sub	r20, r24
     2c4:	59 0b       	sbc	r21, r25
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <fastLoop+0x7e>
     2c8:	40 91 3a 01 	lds	r20, 0x013A
     2cc:	50 91 3b 01 	lds	r21, 0x013B
	uint16_t ruddV = ruddToggle ? 0x3ff - (uint16_t)rawstickvalues[3] : (uint16_t)rawstickvalues[3];
     2d0:	80 91 34 01 	lds	r24, 0x0134
     2d4:	88 23       	and	r24, r24
     2d6:	49 f0       	breq	.+18     	; 0x2ea <fastLoop+0x98>
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	33 e0       	ldi	r19, 0x03	; 3
     2dc:	80 91 3c 01 	lds	r24, 0x013C
     2e0:	90 91 3d 01 	lds	r25, 0x013D
     2e4:	28 1b       	sub	r18, r24
     2e6:	39 0b       	sbc	r19, r25
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <fastLoop+0xa0>
     2ea:	20 91 3c 01 	lds	r18, 0x013C
     2ee:	30 91 3d 01 	lds	r19, 0x013D
	
	switch(transmitMode) {
     2f2:	10 91 17 01 	lds	r17, 0x0117
     2f6:	12 30       	cpi	r17, 0x02	; 2
     2f8:	40 f0       	brcs	.+16     	; 0x30a <fastLoop+0xb8>
     2fa:	13 30       	cpi	r17, 0x03	; 3
     2fc:	09 f0       	breq	.+2      	; 0x300 <fastLoop+0xae>
     2fe:	4c c0       	rjmp	.+152    	; 0x398 <fastLoop+0x146>
		case eTM_trainer_master: // in trainer master mode
		if(rateSwitch == 0) { // rate switch in slave has control position
     300:	80 91 31 01 	lds	r24, 0x0131
     304:	88 23       	and	r24, r24
     306:	09 f4       	brne	.+2      	; 0x30a <fastLoop+0xb8>
     308:	47 c0       	rjmp	.+142    	; 0x398 <fastLoop+0x146>
		}
		// FALLTHROUGH! only falls through if rateSwitch is 1, i.e. master in control
		case eTM_normal: // in normal mode
		case eTM_bind: // in bind mode
		
		if(mixToggle)
     30a:	80 91 30 01 	lds	r24, 0x0130
     30e:	90 91 40 01 	lds	r25, 0x0140
     312:	88 23       	and	r24, r24
     314:	d1 f0       	breq	.+52     	; 0x34a <fastLoop+0xf8>
		{			// special for blade heli (tested with Blade nano)
			outch[0] = (auxSwitch && !KillEngine)?SPEKTRUM_max:SPEKTRUM_min; //idle up;;
     316:	99 23       	and	r25, r25
     318:	39 f0       	breq	.+14     	; 0x328 <fastLoop+0xd6>
     31a:	80 91 16 01 	lds	r24, 0x0116
     31e:	88 23       	and	r24, r24
     320:	19 f4       	brne	.+6      	; 0x328 <fastLoop+0xd6>
     322:	8e e5       	ldi	r24, 0x5E	; 94
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	02 c0       	rjmp	.+4      	; 0x32c <fastLoop+0xda>
     328:	82 ea       	ldi	r24, 0xA2	; 162
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9a 83       	std	Y+2, r25	; 0x02
     32e:	89 83       	std	Y+1, r24	; 0x01
			outch[1] = aileV;
     330:	bc 83       	std	Y+4, r27	; 0x04
     332:	ab 83       	std	Y+3, r26	; 0x03
			outch[2] = elevV;
     334:	7e 83       	std	Y+6, r23	; 0x06
     336:	6d 83       	std	Y+5, r22	; 0x05
			outch[3] = ruddV;
     338:	38 87       	std	Y+8, r19	; 0x08
     33a:	2f 83       	std	Y+7, r18	; 0x07
			outch[4] = SPEKTRUM_med; // fixme no idea!
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	9a 87       	std	Y+10, r25	; 0x0a
     342:	89 87       	std	Y+9, r24	; 0x09
			outch[5] = pitchV; // fixme limit here
     344:	5c 87       	std	Y+12, r21	; 0x0c
     346:	4b 87       	std	Y+11, r20	; 0x0b
     348:	1c c0       	rjmp	.+56     	; 0x382 <fastLoop+0x130>
		{			// normal output
			outch[0] = elevV;
			outch[1] = aileV;
			outch[2] = pitchV;
			outch[3] = ruddV;
			outch[4] = auxSwitch?SPEKTRUM_min:SPEKTRUM_max; //aux1;
     34a:	99 23       	and	r25, r25
     34c:	19 f4       	brne	.+6      	; 0x354 <fastLoop+0x102>
     34e:	ee e5       	ldi	r30, 0x5E	; 94
     350:	f3 e0       	ldi	r31, 0x03	; 3
     352:	02 c0       	rjmp	.+4      	; 0x358 <fastLoop+0x106>
     354:	e2 ea       	ldi	r30, 0xA2	; 162
     356:	f0 e0       	ldi	r31, 0x00	; 0
			outch[5] = rateSwitch?SPEKTRUM_min:SPEKTRUM_max; //aux2;
     358:	80 91 31 01 	lds	r24, 0x0131
     35c:	88 23       	and	r24, r24
     35e:	19 f4       	brne	.+6      	; 0x366 <fastLoop+0x114>
     360:	8e e5       	ldi	r24, 0x5E	; 94
     362:	93 e0       	ldi	r25, 0x03	; 3
     364:	02 c0       	rjmp	.+4      	; 0x36a <fastLoop+0x118>
     366:	82 ea       	ldi	r24, 0xA2	; 162
     368:	90 e0       	ldi	r25, 0x00	; 0
			outch[4] = SPEKTRUM_med; // fixme no idea!
			outch[5] = pitchV; // fixme limit here
		}
		else
		{			// normal output
			outch[0] = elevV;
     36a:	7a 83       	std	Y+2, r23	; 0x02
     36c:	69 83       	std	Y+1, r22	; 0x01
			outch[1] = aileV;
     36e:	bc 83       	std	Y+4, r27	; 0x04
     370:	ab 83       	std	Y+3, r26	; 0x03
			outch[2] = pitchV;
     372:	5e 83       	std	Y+6, r21	; 0x06
     374:	4d 83       	std	Y+5, r20	; 0x05
			outch[3] = ruddV;
     376:	38 87       	std	Y+8, r19	; 0x08
     378:	2f 83       	std	Y+7, r18	; 0x07
			outch[4] = auxSwitch?SPEKTRUM_min:SPEKTRUM_max; //aux1;
     37a:	fa 87       	std	Y+10, r31	; 0x0a
     37c:	e9 87       	std	Y+9, r30	; 0x09
			outch[5] = rateSwitch?SPEKTRUM_min:SPEKTRUM_max; //aux2;
     37e:	9c 87       	std	Y+12, r25	; 0x0c
     380:	8b 87       	std	Y+11, r24	; 0x0b
		}
		
		
		spektrumSend(outch,transmitMode,toggleCounter >= 4);
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	80 91 43 01 	lds	r24, 0x0143
     388:	84 30       	cpi	r24, 0x04	; 4
     38a:	08 f0       	brcs	.+2      	; 0x38e <fastLoop+0x13c>
     38c:	41 e0       	ldi	r20, 0x01	; 1
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	61 2f       	mov	r22, r17
     394:	0e 94 b8 0b 	call	0x1770	; 0x1770 <spektrumSend>
	

	
	// Power LED - pulses depending on battery level
	static uint8_t LED0Dir = 1;
	if(LED0Dir) {
     398:	80 91 00 01 	lds	r24, 0x0100
     39c:	90 91 0e 01 	lds	r25, 0x010E
     3a0:	88 23       	and	r24, r24
     3a2:	59 f0       	breq	.+22     	; 0x3ba <fastLoop+0x168>
		if(LED0Duty > 100) LED0Dir = 0;
     3a4:	95 36       	cpi	r25, 0x65	; 101
     3a6:	18 f0       	brcs	.+6      	; 0x3ae <fastLoop+0x15c>
     3a8:	10 92 00 01 	sts	0x0100, r1
     3ac:	11 c0       	rjmp	.+34     	; 0x3d0 <fastLoop+0x17e>
		else LED0Duty += battPulse;
     3ae:	80 91 3e 01 	lds	r24, 0x013E
     3b2:	89 0f       	add	r24, r25
     3b4:	80 93 0e 01 	sts	0x010E, r24
     3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <fastLoop+0x17e>
	}
	else {
		if(LED0Duty < battPulse) LED0Dir = 1;
     3ba:	80 91 3e 01 	lds	r24, 0x013E
     3be:	98 17       	cp	r25, r24
     3c0:	20 f4       	brcc	.+8      	; 0x3ca <fastLoop+0x178>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 00 01 	sts	0x0100, r24
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <fastLoop+0x17e>
		else LED0Duty -= battPulse;
     3ca:	98 1b       	sub	r25, r24
     3cc:	90 93 0e 01 	sts	0x010E, r25
	}
	
	// LED1 - is on for range check or bind mode (solid for range check, pulse for bind)
	static uint8_t LED1Dir = 0;
	if(transmitMode == 1) {// bind mode
     3d0:	20 91 17 01 	lds	r18, 0x0117
     3d4:	21 30       	cpi	r18, 0x01	; 1
     3d6:	81 f4       	brne	.+32     	; 0x3f8 <fastLoop+0x1a6>
		if(LED1Dir) {
     3d8:	80 91 1b 01 	lds	r24, 0x011B
     3dc:	90 91 0f 01 	lds	r25, 0x010F
     3e0:	88 23       	and	r24, r24
     3e2:	29 f0       	breq	.+10     	; 0x3ee <fastLoop+0x19c>
			if(LED1Duty > 100) LED1Dir = 0;
     3e4:	95 36       	cpi	r25, 0x65	; 101
     3e6:	98 f0       	brcs	.+38     	; 0x40e <fastLoop+0x1bc>
     3e8:	10 92 1b 01 	sts	0x011B, r1
     3ec:	19 c0       	rjmp	.+50     	; 0x420 <fastLoop+0x1ce>
			else LED1Duty += 10;
		}
		else {
			if(LED1Duty < 10) LED1Dir = 1;
     3ee:	9a 30       	cpi	r25, 0x0A	; 10
     3f0:	a0 f4       	brcc	.+40     	; 0x41a <fastLoop+0x1c8>
     3f2:	20 93 1b 01 	sts	0x011B, r18
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <fastLoop+0x1ce>
			else LED1Duty -= 10;
		}
	}
	else if(toggleCounter >= 4) { // range check
     3f8:	80 91 43 01 	lds	r24, 0x0143
     3fc:	90 91 0f 01 	lds	r25, 0x010F
     400:	84 30       	cpi	r24, 0x04	; 4
     402:	38 f0       	brcs	.+14     	; 0x412 <fastLoop+0x1c0>
		LED1Dir = 1;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 1b 01 	sts	0x011B, r24
		if(LED1Duty <= 190) LED1Duty+=10;
     40a:	9f 3b       	cpi	r25, 0xBF	; 191
     40c:	48 f4       	brcc	.+18     	; 0x420 <fastLoop+0x1ce>
     40e:	96 5f       	subi	r25, 0xF6	; 246
     410:	05 c0       	rjmp	.+10     	; 0x41c <fastLoop+0x1ca>
	}
	else {
		LED1Dir = 0;
     412:	10 92 1b 01 	sts	0x011B, r1
		if(LED1Duty >= 10) LED1Duty-=10;
     416:	9a 30       	cpi	r25, 0x0A	; 10
     418:	18 f0       	brcs	.+6      	; 0x420 <fastLoop+0x1ce>
     41a:	9a 50       	subi	r25, 0x0A	; 10
     41c:	90 93 0f 01 	sts	0x010F, r25
	}
	
	// LED2 - is on in trainer mode, pulses when slave is in control
	static uint8_t LED2Dir = 0;
	if(trainerPlugged) { // trainer unplugged, LED fades off
     420:	80 91 41 01 	lds	r24, 0x0141
     424:	88 23       	and	r24, r24
     426:	41 f0       	breq	.+16     	; 0x438 <fastLoop+0x1e6>
		LED2Dir = 0;
     428:	10 92 1a 01 	sts	0x011A, r1
		if(LED2Duty >= 10) LED2Duty-=10;
     42c:	80 91 10 01 	lds	r24, 0x0110
     430:	8a 30       	cpi	r24, 0x0A	; 10
     432:	48 f1       	brcs	.+82     	; 0x486 <fastLoop+0x234>
     434:	8a 50       	subi	r24, 0x0A	; 10
     436:	25 c0       	rjmp	.+74     	; 0x482 <fastLoop+0x230>
	}
	else { // trainer plugged
		if(transmitMode == 3 && rateSwitch == 0) { // LED pulses in traner master mode and slave in control
     438:	23 30       	cpi	r18, 0x03	; 3
     43a:	d9 f4       	brne	.+54     	; 0x472 <fastLoop+0x220>
     43c:	80 91 31 01 	lds	r24, 0x0131
     440:	88 23       	and	r24, r24
     442:	b9 f4       	brne	.+46     	; 0x472 <fastLoop+0x220>
			if(LED2Dir) {
     444:	80 91 1a 01 	lds	r24, 0x011A
     448:	90 91 10 01 	lds	r25, 0x0110
     44c:	88 23       	and	r24, r24
     44e:	39 f0       	breq	.+14     	; 0x45e <fastLoop+0x20c>
				if(LED2Duty > 100) LED2Dir = 0;
     450:	95 36       	cpi	r25, 0x65	; 101
     452:	18 f0       	brcs	.+6      	; 0x45a <fastLoop+0x208>
     454:	10 92 1a 01 	sts	0x011A, r1
     458:	16 c0       	rjmp	.+44     	; 0x486 <fastLoop+0x234>
				else LED2Duty += 10;
     45a:	96 5f       	subi	r25, 0xF6	; 246
     45c:	07 c0       	rjmp	.+14     	; 0x46c <fastLoop+0x21a>
			}
			else {
				if(LED2Duty < 10) LED2Dir = 1;
     45e:	9a 30       	cpi	r25, 0x0A	; 10
     460:	20 f4       	brcc	.+8      	; 0x46a <fastLoop+0x218>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 1a 01 	sts	0x011A, r24
     468:	0e c0       	rjmp	.+28     	; 0x486 <fastLoop+0x234>
				else LED2Duty -= 10;
     46a:	9a 50       	subi	r25, 0x0A	; 10
     46c:	90 93 10 01 	sts	0x0110, r25
     470:	0a c0       	rjmp	.+20     	; 0x486 <fastLoop+0x234>
			}
		}
		else {
			// LED is on (trainer slave mode, or trainer master mode but master in control)
			LED2Dir = 1;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 1a 01 	sts	0x011A, r24
			if(LED2Duty <= 190) LED2Duty+=10;
     478:	80 91 10 01 	lds	r24, 0x0110
     47c:	8f 3b       	cpi	r24, 0xBF	; 191
     47e:	18 f4       	brcc	.+6      	; 0x486 <fastLoop+0x234>
     480:	86 5f       	subi	r24, 0xF6	; 246
     482:	80 93 10 01 	sts	0x0110, r24
		}
	}
	
	// LED3 - mode indicator for the MIX switch
	static uint8_t LED3Dir = 0;
	LED3Dir = !KillEngine && auxSwitch;// display engine on mixToggle;
     486:	80 91 16 01 	lds	r24, 0x0116
     48a:	88 23       	and	r24, r24
     48c:	19 f0       	breq	.+6      	; 0x494 <fastLoop+0x242>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <fastLoop+0x254>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	80 91 40 01 	lds	r24, 0x0140
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <fastLoop+0x24e>
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	98 27       	eor	r25, r24
     4a4:	89 2f       	mov	r24, r25
     4a6:	80 93 19 01 	sts	0x0119, r24
     4aa:	20 91 11 01 	lds	r18, 0x0111
	if(LED3Dir) {
     4ae:	88 23       	and	r24, r24
     4b0:	21 f0       	breq	.+8      	; 0x4ba <fastLoop+0x268>
		if(LED3Duty <= 190) LED3Duty+=10;
     4b2:	2f 3b       	cpi	r18, 0xBF	; 191
     4b4:	38 f4       	brcc	.+14     	; 0x4c4 <fastLoop+0x272>
     4b6:	26 5f       	subi	r18, 0xF6	; 246
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <fastLoop+0x26e>
	}
	else {
		if(LED3Duty >= 10) LED3Duty-=10;
     4ba:	2a 30       	cpi	r18, 0x0A	; 10
     4bc:	18 f0       	brcs	.+6      	; 0x4c4 <fastLoop+0x272>
     4be:	2a 50       	subi	r18, 0x0A	; 10
     4c0:	20 93 11 01 	sts	0x0111, r18
	}
	
}
     4c4:	2c 96       	adiw	r28, 0x0c	; 12
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	1f 91       	pop	r17
     4d6:	08 95       	ret

000004d8 <getDigital>:
}

void getDigital(void) {
	// Get switches
	static uint8_t rateSwitchPrev = 3;
	rateSwitch = RATEPIN;
     4d8:	99 b1       	in	r25, 0x09	; 9
     4da:	92 95       	swap	r25
     4dc:	96 95       	lsr	r25
     4de:	96 95       	lsr	r25
     4e0:	91 70       	andi	r25, 0x01	; 1
     4e2:	90 93 31 01 	sts	0x0131, r25
	if(rateSwitch != rateSwitchPrev) {
     4e6:	80 91 09 01 	lds	r24, 0x0109
     4ea:	98 17       	cp	r25, r24
     4ec:	e9 f1       	breq	.+122    	; 0x568 <__stack+0x69>
		rateSwitchPrev = rateSwitch;
     4ee:	90 93 09 01 	sts	0x0109, r25
		IdleSeconds=0;
     4f2:	10 92 15 01 	sts	0x0115, r1
     4f6:	10 92 14 01 	sts	0x0114, r1
		if(rateSwitch) oneTone(NOTE6C);
     4fa:	99 23       	and	r25, r25
     4fc:	21 f0       	breq	.+8      	; 0x506 <__stack+0x7>
     4fe:	87 e7       	ldi	r24, 0x77	; 119
     500:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     504:	03 c0       	rjmp	.+6      	; 0x50c <__stack+0xd>
		else twoTone(NOTE6C);
     506:	87 e7       	ldi	r24, 0x77	; 119
     508:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
		
		if(bindSwitch == 0) { // if bind button is held down and the rate switch toggled four times, enter range check mode
     50c:	80 91 33 01 	lds	r24, 0x0133
     510:	88 23       	and	r24, r24
     512:	51 f5       	brne	.+84     	; 0x568 <__stack+0x69>
			toggleCounter++;
     514:	80 91 43 01 	lds	r24, 0x0143
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	80 93 43 01 	sts	0x0143, r24
			if(toggleCounter == 4) {
     51e:	84 30       	cpi	r24, 0x04	; 4
     520:	f9 f4       	brne	.+62     	; 0x560 <__stack+0x61>
				noteBuffer[0] = NOTE5G;
     522:	8f e9       	ldi	r24, 0x9F	; 159
     524:	80 93 46 01 	sts	0x0146, r24
				noteBuffer[1] = NOTE5FS;
     528:	89 ea       	ldi	r24, 0xA9	; 169
     52a:	80 93 47 01 	sts	0x0147, r24
				noteBuffer[2] = NOTE5F;
     52e:	83 eb       	ldi	r24, 0xB3	; 179
     530:	80 93 48 01 	sts	0x0148, r24
				noteBuffer[3] = NOTE5E;
     534:	8e eb       	ldi	r24, 0xBE	; 190
     536:	80 93 49 01 	sts	0x0149, r24
				noteBuffer[4] = NOTE5DS;
     53a:	89 ec       	ldi	r24, 0xC9	; 201
     53c:	80 93 4a 01 	sts	0x014A, r24
				noteBuffer[5] = NOTE5D;
     540:	85 ed       	ldi	r24, 0xD5	; 213
     542:	80 93 4b 01 	sts	0x014B, r24
				noteBuffer[6] = NOTE5CS;
     546:	81 ee       	ldi	r24, 0xE1	; 225
     548:	80 93 4c 01 	sts	0x014C, r24
				noteBuffer[7] = NOTE5C;
     54c:	8f ee       	ldi	r24, 0xEF	; 239
     54e:	80 93 4d 01 	sts	0x014D, r24
				noteBuffer[8] = NOTESTOP;
     552:	10 92 4e 01 	sts	0x014E, r1
				noteCounter = 0;
     556:	10 92 45 01 	sts	0x0145, r1
				noteInterruptable = 0;
     55a:	10 92 5a 01 	sts	0x015A, r1
     55e:	04 c0       	rjmp	.+8      	; 0x568 <__stack+0x69>
			}
			else if(toggleCounter > 10) stickCalibrate();//paschaOvo();
     560:	8b 30       	cpi	r24, 0x0B	; 11
     562:	10 f0       	brcs	.+4      	; 0x568 <__stack+0x69>
     564:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <stickCalibrate>
		}
	}
	
	static uint8_t auxSwitchPrev = 3;
	auxSwitch  = AUXPIN;
     568:	99 b1       	in	r25, 0x09	; 9
     56a:	99 1f       	adc	r25, r25
     56c:	99 27       	eor	r25, r25
     56e:	99 1f       	adc	r25, r25
     570:	90 93 40 01 	sts	0x0140, r25
	if(auxSwitch != auxSwitchPrev) {
     574:	80 91 08 01 	lds	r24, 0x0108
     578:	98 17       	cp	r25, r24
     57a:	01 f1       	breq	.+64     	; 0x5bc <__stack+0xbd>
		auxSwitchPrev = auxSwitch;
     57c:	90 93 08 01 	sts	0x0108, r25
		IdleSeconds=0;
     580:	10 92 15 01 	sts	0x0115, r1
     584:	10 92 14 01 	sts	0x0114, r1
		if(auxSwitch) 
     588:	99 23       	and	r25, r25
     58a:	31 f0       	breq	.+12     	; 0x598 <__stack+0x99>
		{
			// on
			KillEngine = 0;
     58c:	10 92 16 01 	sts	0x0116, r1
			twoTone(NOTE6E);
     590:	8f e5       	ldi	r24, 0x5F	; 95
     592:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
     596:	12 c0       	rjmp	.+36     	; 0x5bc <__stack+0xbd>
		}
		else 
		{
			// off
			oneTone(NOTE6E);
     598:	8f e5       	ldi	r24, 0x5F	; 95
     59a:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
			if(mixToggle) // Heli special
     59e:	80 91 30 01 	lds	r24, 0x0130
     5a2:	88 23       	and	r24, r24
     5a4:	59 f0       	breq	.+22     	; 0x5bc <__stack+0xbd>
			{
				if(FlySeconds > FLYSECONDS_MAX)
     5a6:	80 91 12 01 	lds	r24, 0x0112
     5aa:	90 91 13 01 	lds	r25, 0x0113
     5ae:	85 3b       	cpi	r24, 0xB5	; 181
     5b0:	91 05       	cpc	r25, r1
     5b2:	20 f0       	brcs	.+8      	; 0x5bc <__stack+0xbd>
				{
					FlySeconds = 0;
     5b4:	10 92 13 01 	sts	0x0113, r1
     5b8:	10 92 12 01 	sts	0x0112, r1
			}
		}
	}

	static uint8_t bindSwitchPrev = 3;
	bindSwitch = BINDPIN;
     5bc:	99 b1       	in	r25, 0x09	; 9
     5be:	92 95       	swap	r25
     5c0:	96 95       	lsr	r25
     5c2:	91 70       	andi	r25, 0x01	; 1
     5c4:	90 93 33 01 	sts	0x0133, r25
	if(bindSwitch == 0) KillEngine = 1;
     5c8:	99 23       	and	r25, r25
     5ca:	19 f4       	brne	.+6      	; 0x5d2 <__stack+0xd3>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 16 01 	sts	0x0116, r24
	if(bindSwitch != bindSwitchPrev) {
     5d2:	80 91 07 01 	lds	r24, 0x0107
     5d6:	98 17       	cp	r25, r24
     5d8:	b9 f0       	breq	.+46     	; 0x608 <__stack+0x109>
		bindSwitchPrev = bindSwitch;
     5da:	90 93 07 01 	sts	0x0107, r25
		IdleSeconds=0;
     5de:	10 92 15 01 	sts	0x0115, r1
     5e2:	10 92 14 01 	sts	0x0114, r1
		if(bindSwitch) {
     5e6:	99 23       	and	r25, r25
     5e8:	61 f0       	breq	.+24     	; 0x602 <__stack+0x103>
			oneTone(NOTE6C);
     5ea:	87 e7       	ldi	r24, 0x77	; 119
     5ec:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
			toggleCounter = 0; // when releasing Bind switch, zero the toggle counter (for the range check mode)
     5f0:	10 92 43 01 	sts	0x0143, r1
			if(transmitMode == 1) transmitMode = 0; // when releasing Bind switch, escape from bind mode
     5f4:	80 91 17 01 	lds	r24, 0x0117
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	31 f4       	brne	.+12     	; 0x608 <__stack+0x109>
     5fc:	10 92 17 01 	sts	0x0117, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <__stack+0x109>
		}
		else oneTone(NOTE6G);
     602:	80 e5       	ldi	r24, 0x50	; 80
     604:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
	}
	static uint8_t throTogglePrev = 3;
	throToggle  = THROPIN;
     608:	93 b1       	in	r25, 0x03	; 3
     60a:	91 70       	andi	r25, 0x01	; 1
     60c:	90 93 42 01 	sts	0x0142, r25
	if(throToggle != throTogglePrev) {
     610:	80 91 06 01 	lds	r24, 0x0106
     614:	98 17       	cp	r25, r24
     616:	59 f0       	breq	.+22     	; 0x62e <__stack+0x12f>
		throTogglePrev = throToggle;
     618:	90 93 06 01 	sts	0x0106, r25
		if(throToggle) oneTone(NOTE5C);
     61c:	99 23       	and	r25, r25
     61e:	21 f0       	breq	.+8      	; 0x628 <__stack+0x129>
     620:	8f ee       	ldi	r24, 0xEF	; 239
     622:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     626:	03 c0       	rjmp	.+6      	; 0x62e <__stack+0x12f>
		else twoTone(NOTE5C);
     628:	8f ee       	ldi	r24, 0xEF	; 239
     62a:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
	}

	static uint8_t aileTogglePrev = 3;
	aileToggle  = AILEPIN;
     62e:	93 b1       	in	r25, 0x03	; 3
     630:	96 95       	lsr	r25
     632:	91 70       	andi	r25, 0x01	; 1
     634:	90 93 35 01 	sts	0x0135, r25
	if(aileToggle != aileTogglePrev) {
     638:	80 91 05 01 	lds	r24, 0x0105
     63c:	98 17       	cp	r25, r24
     63e:	59 f0       	breq	.+22     	; 0x656 <__stack+0x157>
		aileTogglePrev = aileToggle;
     640:	90 93 05 01 	sts	0x0105, r25
		if(aileToggle) oneTone(NOTE5D);
     644:	99 23       	and	r25, r25
     646:	21 f0       	breq	.+8      	; 0x650 <__stack+0x151>
     648:	85 ed       	ldi	r24, 0xD5	; 213
     64a:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     64e:	03 c0       	rjmp	.+6      	; 0x656 <__stack+0x157>
		else twoTone(NOTE5D);
     650:	85 ed       	ldi	r24, 0xD5	; 213
     652:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
	}
	
	static uint8_t elevTogglePrev = 3;
	elevToggle  = ELEVPIN;
     656:	93 b1       	in	r25, 0x03	; 3
     658:	96 95       	lsr	r25
     65a:	96 95       	lsr	r25
     65c:	91 70       	andi	r25, 0x01	; 1
     65e:	90 93 32 01 	sts	0x0132, r25
	if(elevToggle != elevTogglePrev) {
     662:	80 91 04 01 	lds	r24, 0x0104
     666:	98 17       	cp	r25, r24
     668:	59 f0       	breq	.+22     	; 0x680 <__stack+0x181>
		elevTogglePrev = elevToggle;
     66a:	90 93 04 01 	sts	0x0104, r25
		if(elevToggle) oneTone(NOTE5E);
     66e:	99 23       	and	r25, r25
     670:	21 f0       	breq	.+8      	; 0x67a <__stack+0x17b>
     672:	8e eb       	ldi	r24, 0xBE	; 190
     674:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     678:	03 c0       	rjmp	.+6      	; 0x680 <__stack+0x181>
		else twoTone(NOTE5E);
     67a:	8e eb       	ldi	r24, 0xBE	; 190
     67c:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
	}
	
	static uint8_t ruddTogglePrev = 3;
	ruddToggle  = RUDDPIN;
     680:	93 b1       	in	r25, 0x03	; 3
     682:	96 95       	lsr	r25
     684:	96 95       	lsr	r25
     686:	96 95       	lsr	r25
     688:	91 70       	andi	r25, 0x01	; 1
     68a:	90 93 34 01 	sts	0x0134, r25
	if(ruddToggle != ruddTogglePrev) {
     68e:	80 91 03 01 	lds	r24, 0x0103
     692:	98 17       	cp	r25, r24
     694:	59 f0       	breq	.+22     	; 0x6ac <__stack+0x1ad>
		ruddTogglePrev = ruddToggle;
     696:	90 93 03 01 	sts	0x0103, r25
		if(ruddToggle) oneTone(NOTE5F);
     69a:	99 23       	and	r25, r25
     69c:	21 f0       	breq	.+8      	; 0x6a6 <__stack+0x1a7>
     69e:	83 eb       	ldi	r24, 0xB3	; 179
     6a0:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <__stack+0x1ad>
		else twoTone(NOTE5F);
     6a6:	83 eb       	ldi	r24, 0xB3	; 179
     6a8:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
	}

	static uint8_t mixTogglePrev = 3;
	mixToggle  = MIXPIN;
     6ac:	93 b1       	in	r25, 0x03	; 3
     6ae:	92 95       	swap	r25
     6b0:	91 70       	andi	r25, 0x01	; 1
     6b2:	90 93 30 01 	sts	0x0130, r25
	if(mixToggle != mixTogglePrev) {
     6b6:	80 91 02 01 	lds	r24, 0x0102
     6ba:	98 17       	cp	r25, r24
     6bc:	59 f0       	breq	.+22     	; 0x6d4 <__stack+0x1d5>
		mixTogglePrev = mixToggle;
     6be:	90 93 02 01 	sts	0x0102, r25
		if(mixToggle) oneTone(NOTE5G);
     6c2:	99 23       	and	r25, r25
     6c4:	21 f0       	breq	.+8      	; 0x6ce <__stack+0x1cf>
     6c6:	8f e9       	ldi	r24, 0x9F	; 159
     6c8:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <__stack+0x1d5>
		else twoTone(NOTE5G);
     6ce:	8f e9       	ldi	r24, 0x9F	; 159
     6d0:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
	}
	
	static uint8_t mdTogglePrev = 3;
	mdToggle  = MDPIN; // mute
     6d4:	93 b1       	in	r25, 0x03	; 3
     6d6:	92 95       	swap	r25
     6d8:	96 95       	lsr	r25
     6da:	91 70       	andi	r25, 0x01	; 1
     6dc:	90 93 3f 01 	sts	0x013F, r25
	if(mdToggle != mdTogglePrev) {
     6e0:	80 91 01 01 	lds	r24, 0x0101
     6e4:	98 17       	cp	r25, r24
     6e6:	f1 f0       	breq	.+60     	; 0x724 <__stack+0x225>
		mdTogglePrev = mdToggle;
     6e8:	90 93 01 01 	sts	0x0101, r25
		if(mdToggle) 
     6ec:	99 23       	and	r25, r25
     6ee:	21 f0       	breq	.+8      	; 0x6f8 <__stack+0x1f9>
			mute = 1; // fixme add mode stuff here
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 44 01 	sts	0x0144, r24
     6f6:	08 95       	ret
		else {
			mute = 0; // plays tone on unmute
     6f8:	10 92 44 01 	sts	0x0144, r1
			if(noteInterruptable) {
     6fc:	80 91 5a 01 	lds	r24, 0x015A
     700:	88 23       	and	r24, r24
     702:	81 f0       	breq	.+32     	; 0x724 <__stack+0x225>
				noteBuffer[0] = NOTE6C;
     704:	87 e7       	ldi	r24, 0x77	; 119
     706:	80 93 46 01 	sts	0x0146, r24
				noteBuffer[1] = NOTE7C;
     70a:	8c e3       	ldi	r24, 0x3C	; 60
     70c:	80 93 47 01 	sts	0x0147, r24
				noteBuffer[2] = NOTE7D;
     710:	85 e3       	ldi	r24, 0x35	; 53
     712:	80 93 48 01 	sts	0x0148, r24
				noteBuffer[3] = NOTE7E;
     716:	8f e2       	ldi	r24, 0x2F	; 47
     718:	80 93 49 01 	sts	0x0149, r24
				noteBuffer[4] = NOTESTOP;
     71c:	10 92 4a 01 	sts	0x014A, r1
				noteCounter = 0;
     720:	10 92 45 01 	sts	0x0145, r1
     724:	08 95       	ret

00000726 <main>:
	PORTC |= 0x07;
	PORTD |= 0x01;
}


int main(void) {
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
	// Setup pins
	DDRB = 0x00;	// All pins inputs
     72a:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x07;	// PC0,1,2 as outputs for the LEDs
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x0b;	// PD0 as output for LED, PD1 for TXD, PD3 for buzzer
     730:	8b e0       	ldi	r24, 0x0B	; 11
     732:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = 0xe0;	// Pullups for switches
     734:	80 ee       	ldi	r24, 0xE0	; 224
     736:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0x3f;	// Pullups for switches
     738:	8f e3       	ldi	r24, 0x3F	; 63
     73a:	85 b9       	out	0x05, r24	; 5
extern uint8_t noteInterruptable;
extern uint8_t mute;


void LEDOff(void) {
	PORTC |= 0x07;
     73c:	88 b1       	in	r24, 0x08	; 8
     73e:	87 60       	ori	r24, 0x07	; 7
     740:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0x01;
     742:	58 9a       	sbi	0x0b, 0	; 11
	
	// LEDs
	LEDOff();
	
	// ADC
	ADMUX = 0x4f; // start off with mux on internal input
     744:	8f e4       	ldi	r24, 0x4F	; 79
     746:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0x80; // ADC EN
     74a:	80 e8       	ldi	r24, 0x80	; 128
     74c:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = 0x38; // disable digital buffers on ADC pins
     750:	88 e3       	ldi	r24, 0x38	; 56
     752:	80 93 7e 00 	sts	0x007E, r24
	
	// Timer
	TCCR0A = 0x00;  // Normal mode
     756:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x03;  // prescaler at 64 results in 125kHz ticks
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	85 bd       	out	0x25, r24	; 37
	
	// UART
	cli(); // disable global interrupts
     75c:	f8 94       	cli

	stickInit(); // initialise stick input
     75e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <stickInit>
	
	spektrumInit();
     762:	0e 94 ac 0b 	call	0x1758	; 0x1758 <spektrumInit>
	
	// Get startup mode
	trainerPlugged = TRAINERPIN;
     766:	89 b1       	in	r24, 0x09	; 9
     768:	82 95       	swap	r24
     76a:	81 70       	andi	r24, 0x01	; 1
     76c:	80 93 41 01 	sts	0x0141, r24
	bindSwitch = BINDPIN;
     770:	99 b1       	in	r25, 0x09	; 9
     772:	92 95       	swap	r25
     774:	96 95       	lsr	r25
     776:	91 70       	andi	r25, 0x01	; 1
     778:	90 93 33 01 	sts	0x0133, r25
	transmitMode = 0;
     77c:	10 92 17 01 	sts	0x0117, r1
	if(trainerPlugged == 0) transmitMode = eTM_trainer_master; // fixme or trainer slave, if PPM signal present
     780:	88 23       	and	r24, r24
     782:	19 f4       	brne	.+6      	; 0x78a <main+0x64>
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	80 93 17 01 	sts	0x0117, r24

	if(bindSwitch == 0) transmitMode = eTM_bind;
     78a:	99 23       	and	r25, r25
     78c:	19 f4       	brne	.+6      	; 0x794 <main+0x6e>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 17 01 	sts	0x0117, r24
	static uint8_t fastScaler = 255;
	static uint8_t slowScaler = 255;
	static uint16_t secondScaler = 0xffff;
	
	// Buzzer
	TCCR2B = 0x03; // prescaler at 64
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 b1 00 	sts	0x00B1, r24
	stopNote();
     79a:	0e 94 96 04 	call	0x92c	; 0x92c <stopNote>
	noteBuffer[0] = NOTE6G;
     79e:	80 e5       	ldi	r24, 0x50	; 80
     7a0:	80 93 46 01 	sts	0x0146, r24
	noteBuffer[1] = NOTE6GS;
     7a4:	8b e4       	ldi	r24, 0x4B	; 75
     7a6:	80 93 47 01 	sts	0x0147, r24

	noteBuffer[2] = NOTESTOP;
     7aa:	10 92 48 01 	sts	0x0148, r1
	noteCounter = 0;
     7ae:	10 92 45 01 	sts	0x0145, r1
	noteInterruptable = 0;
     7b2:	10 92 5a 01 	sts	0x015A, r1
		while(TCNT0 < FASTLOOPCOUNT)
		{
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED0Duty/3) LED0On(); // red LED too bright, reduce duty
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED1Duty) LED1On();
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED2Duty) LED2On();
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED3Duty) LED3On();
     7b6:	ca ef       	ldi	r28, 0xFA	; 250
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
     7ba:	3b c0       	rjmp	.+118    	; 0x832 <main+0x10c>
	while(1) {
		
		
		while(TCNT0 < FASTLOOPCOUNT)
		{
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED0Duty/3) LED0On(); // red LED too bright, reduce duty
     7bc:	86 b5       	in	r24, 0x26	; 38
     7be:	8a 3f       	cpi	r24, 0xFA	; 250
     7c0:	70 f4       	brcc	.+28     	; 0x7de <main+0xb8>
     7c2:	26 b5       	in	r18, 0x26	; 38
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	80 91 0e 01 	lds	r24, 0x010E
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodqi4>
     7d0:	ae 01       	movw	r20, r28
     7d2:	48 1b       	sub	r20, r24
     7d4:	51 09       	sbc	r21, r1
     7d6:	24 17       	cp	r18, r20
     7d8:	35 07       	cpc	r19, r21
     7da:	0c f0       	brlt	.+2      	; 0x7de <main+0xb8>
     7dc:	42 98       	cbi	0x08, 2	; 8
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED1Duty) LED1On();
     7de:	86 b5       	in	r24, 0x26	; 38
     7e0:	8a 3f       	cpi	r24, 0xFA	; 250
     7e2:	58 f4       	brcc	.+22     	; 0x7fa <main+0xd4>
     7e4:	86 b5       	in	r24, 0x26	; 38
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	20 91 0f 01 	lds	r18, 0x010F
     7ec:	ae 01       	movw	r20, r28
     7ee:	42 1b       	sub	r20, r18
     7f0:	51 09       	sbc	r21, r1
     7f2:	84 17       	cp	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <main+0xd4>
     7f8:	40 98       	cbi	0x08, 0	; 8
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED2Duty) LED2On();
     7fa:	86 b5       	in	r24, 0x26	; 38
     7fc:	8a 3f       	cpi	r24, 0xFA	; 250
     7fe:	58 f4       	brcc	.+22     	; 0x816 <main+0xf0>
     800:	86 b5       	in	r24, 0x26	; 38
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	20 91 10 01 	lds	r18, 0x0110
     808:	ae 01       	movw	r20, r28
     80a:	42 1b       	sub	r20, r18
     80c:	51 09       	sbc	r21, r1
     80e:	84 17       	cp	r24, r20
     810:	95 07       	cpc	r25, r21
     812:	0c f0       	brlt	.+2      	; 0x816 <main+0xf0>
     814:	41 98       	cbi	0x08, 1	; 8
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED3Duty) LED3On();
     816:	86 b5       	in	r24, 0x26	; 38
     818:	8a 3f       	cpi	r24, 0xFA	; 250
     81a:	58 f4       	brcc	.+22     	; 0x832 <main+0x10c>
     81c:	86 b5       	in	r24, 0x26	; 38
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	20 91 11 01 	lds	r18, 0x0111
     824:	ae 01       	movw	r20, r28
     826:	42 1b       	sub	r20, r18
     828:	51 09       	sbc	r21, r1
     82a:	84 17       	cp	r24, r20
     82c:	95 07       	cpc	r25, r21
     82e:	0c f0       	brlt	.+2      	; 0x832 <main+0x10c>
     830:	58 98       	cbi	0x0b, 0	; 11

	
	while(1) {
		
		
		while(TCNT0 < FASTLOOPCOUNT)
     832:	86 b5       	in	r24, 0x26	; 38
     834:	8a 3f       	cpi	r24, 0xFA	; 250
     836:	10 f2       	brcs	.-124    	; 0x7bc <main+0x96>
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED0Duty/3) LED0On(); // red LED too bright, reduce duty
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED1Duty) LED1On();
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED2Duty) LED2On();
			if(TCNT0 < FASTLOOPCOUNT && TCNT0 >= FASTLOOPCOUNT-LED3Duty) LED3On();
		}
		TCNT0 = 0; // reduce jitter by resetting soon (SPEKTRUM does not like jitter!)
     838:	16 bc       	out	0x26, r1	; 38
extern uint8_t noteInterruptable;
extern uint8_t mute;


void LEDOff(void) {
	PORTC |= 0x07;
     83a:	88 b1       	in	r24, 0x08	; 8
     83c:	87 60       	ori	r24, 0x07	; 7
     83e:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0x01;
     840:	58 9a       	sbi	0x0b, 0	; 11
		}
		TCNT0 = 0; // reduce jitter by resetting soon (SPEKTRUM does not like jitter!)
		LEDOff();
		
		// should be going at about 625Hz
		getDigital();
     842:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getDigital>
		stickGetRawADC(rawstickvalues);
     846:	86 e3       	ldi	r24, 0x36	; 54
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 28 0c 	call	0x1850	; 0x1850 <stickGetRawADC>
		
	
		if(++fastScaler >= OVERSAMPLE) //should be 22ms for DSMX (Nano Board can not handle it faster!!)
     84e:	80 91 0d 01 	lds	r24, 0x010D
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	80 93 0d 01 	sts	0x010D, r24
     858:	8b 30       	cpi	r24, 0x0B	; 11
     85a:	f8 f0       	brcs	.+62     	; 0x89a <main+0x174>
		{ 
			fastScaler = 0;
     85c:	10 92 0d 01 	sts	0x010D, r1
			
			// this loop runs slower than 50Hz
			fastLoop();
     860:	0e 94 29 01 	call	0x252	; 0x252 <fastLoop>
			/*throVoltage = 0;
			ruddVoltage = 0;
			elevVoltage = 0;
			aileVoltage = 0;*/
			rawstickvalues[0]=0;
     864:	10 92 37 01 	sts	0x0137, r1
     868:	10 92 36 01 	sts	0x0136, r1
			rawstickvalues[1]=0;
     86c:	10 92 39 01 	sts	0x0139, r1
     870:	10 92 38 01 	sts	0x0138, r1
			rawstickvalues[2]=0;
     874:	10 92 3b 01 	sts	0x013B, r1
     878:	10 92 3a 01 	sts	0x013A, r1
			rawstickvalues[3]=0;
     87c:	10 92 3d 01 	sts	0x013D, r1
     880:	10 92 3c 01 	sts	0x013C, r1
			
			if(++slowScaler >= 6) 
     884:	80 91 0c 01 	lds	r24, 0x010C
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	80 93 0c 01 	sts	0x010C, r24
     88e:	86 30       	cpi	r24, 0x06	; 6
     890:	20 f0       	brcs	.+8      	; 0x89a <main+0x174>
			{ // should be going at about 10Hz
				slowScaler = 0;
     892:	10 92 0c 01 	sts	0x010C, r1
				slowLoop();
     896:	0e 94 58 00 	call	0xb0	; 0xb0 <slowLoop>
			}
		}
		
		// we are here every 2ms
		if(++secondScaler >=500)
     89a:	80 91 0a 01 	lds	r24, 0x010A
     89e:	90 91 0b 01 	lds	r25, 0x010B
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	90 93 0b 01 	sts	0x010B, r25
     8a8:	80 93 0a 01 	sts	0x010A, r24
     8ac:	84 5f       	subi	r24, 0xF4	; 244
     8ae:	91 40       	sbci	r25, 0x01	; 1
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <main+0x18e>
     8b2:	bf cf       	rjmp	.-130    	; 0x832 <main+0x10c>
		{
			// every second
			secondScaler=0;
     8b4:	10 92 0b 01 	sts	0x010B, r1
     8b8:	10 92 0a 01 	sts	0x010A, r1
			IdleSeconds++;
     8bc:	80 91 14 01 	lds	r24, 0x0114
     8c0:	90 91 15 01 	lds	r25, 0x0115
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	90 93 15 01 	sts	0x0115, r25
     8ca:	80 93 14 01 	sts	0x0114, r24
			if(auxSwitch && mixToggle)
     8ce:	80 91 40 01 	lds	r24, 0x0140
     8d2:	88 23       	and	r24, r24
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x1b2>
     8d6:	ad cf       	rjmp	.-166    	; 0x832 <main+0x10c>
     8d8:	80 91 30 01 	lds	r24, 0x0130
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <main+0x1bc>
     8e0:	a8 cf       	rjmp	.-176    	; 0x832 <main+0x10c>
			{	
				FlySeconds++;
     8e2:	80 91 12 01 	lds	r24, 0x0112
     8e6:	90 91 13 01 	lds	r25, 0x0113
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 13 01 	sts	0x0113, r25
     8f0:	80 93 12 01 	sts	0x0112, r24
					
				if(FlySeconds == FLYSECONDS_MAX)
     8f4:	84 3b       	cpi	r24, 0xB4	; 180
     8f6:	91 05       	cpc	r25, r1
     8f8:	19 f4       	brne	.+6      	; 0x900 <main+0x1da>
					oneTone(NOTE7B);
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	0e 94 ad 04 	call	0x95a	; 0x95a <oneTone>
				if(FlySeconds == FLYSECONDS_MAX+10)
     900:	80 91 12 01 	lds	r24, 0x0112
     904:	90 91 13 01 	lds	r25, 0x0113
     908:	8e 3b       	cpi	r24, 0xBE	; 190
     90a:	91 05       	cpc	r25, r1
     90c:	19 f4       	brne	.+6      	; 0x914 <main+0x1ee>
					twoTone(NOTE7C);
     90e:	8c e3       	ldi	r24, 0x3C	; 60
     910:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
			
				if(IdleSeconds >= FLYSECONDS_MAX*2)
     914:	80 91 14 01 	lds	r24, 0x0114
     918:	90 91 15 01 	lds	r25, 0x0115
     91c:	88 56       	subi	r24, 0x68	; 104
     91e:	91 40       	sbci	r25, 0x01	; 1
     920:	08 f4       	brcc	.+2      	; 0x924 <main+0x1fe>
     922:	87 cf       	rjmp	.-242    	; 0x832 <main+0x10c>
				{
					twoTone(NOTE7C);
     924:	8c e3       	ldi	r24, 0x3C	; 60
     926:	0e 94 9a 04 	call	0x934	; 0x934 <twoTone>
     92a:	83 cf       	rjmp	.-250    	; 0x832 <main+0x10c>

0000092c <stopNote>:
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     92c:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     930:	5b 98       	cbi	0x0b, 3	; 11
}
     932:	08 95       	ret

00000934 <twoTone>:

void twoTone(uint8_t note) {
     934:	98 2f       	mov	r25, r24
	if(noteInterruptable) {
     936:	80 91 5a 01 	lds	r24, 0x015A
     93a:	88 23       	and	r24, r24
     93c:	69 f0       	breq	.+26     	; 0x958 <twoTone+0x24>
		noteBuffer[0] = note;
     93e:	90 93 46 01 	sts	0x0146, r25
		noteBuffer[1] = NOTEPAUSE;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 47 01 	sts	0x0147, r24
		noteBuffer[2] = note;
     948:	90 93 48 01 	sts	0x0148, r25
		noteBuffer[3] = NOTESTOP;
     94c:	10 92 49 01 	sts	0x0149, r1
		noteCounter = 0;
     950:	10 92 45 01 	sts	0x0145, r1
		noteInterruptable = 1;
     954:	80 93 5a 01 	sts	0x015A, r24
     958:	08 95       	ret

0000095a <oneTone>:
	}
}

void oneTone(uint8_t note) {
     95a:	98 2f       	mov	r25, r24
	if(noteInterruptable) {
     95c:	80 91 5a 01 	lds	r24, 0x015A
     960:	88 23       	and	r24, r24
     962:	49 f0       	breq	.+18     	; 0x976 <oneTone+0x1c>
		noteBuffer[0] = note;
     964:	90 93 46 01 	sts	0x0146, r25
		noteBuffer[1] = NOTESTOP;
     968:	10 92 47 01 	sts	0x0147, r1
		noteCounter = 0;
     96c:	10 92 45 01 	sts	0x0145, r1
		noteInterruptable = 1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 5a 01 	sts	0x015A, r24
     976:	08 95       	ret

00000978 <playNote>:
	}
}

void playNote(uint8_t note) {
     978:	98 2f       	mov	r25, r24
	if(mute == 0) {
     97a:	80 91 44 01 	lds	r24, 0x0144
     97e:	88 23       	and	r24, r24
     980:	69 f4       	brne	.+26     	; 0x99c <playNote+0x24>
		TCCR2A = 0x12; // CTC mode toggle OC2B
     982:	82 e1       	ldi	r24, 0x12	; 18
     984:	80 93 b0 00 	sts	0x00B0, r24
		if(OCR2A != note) {
     988:	80 91 b3 00 	lds	r24, 0x00B3
     98c:	89 17       	cp	r24, r25
     98e:	31 f0       	breq	.+12     	; 0x99c <playNote+0x24>
			OCR2A = note;
     990:	90 93 b3 00 	sts	0x00B3, r25
			OCR2B = note;
     994:	90 93 b4 00 	sts	0x00B4, r25
			TCNT2 = 0;
     998:	10 92 b2 00 	sts	0x00B2, r1
     99c:	08 95       	ret

0000099e <paschaOvo>:
#define CROTCHET    2*QUAVER
#define MINIM       2*CROTCHET
#define BREVE       2*MINIM
#define TRIPLET     CROTCHET/3

void paschaOvo(void) {
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     9a6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     9aa:	5b 98       	cbi	0x0b, 3	; 11
     9ac:	80 e3       	ldi	r24, 0x30	; 48
     9ae:	91 e1       	ldi	r25, 0x11	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9b0:	28 ec       	ldi	r18, 0xC8	; 200
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <paschaOvo+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9bc:	d9 f7       	brne	.-10     	; 0x9b4 <paschaOvo+0x16>
#define BREVE       2*MINIM
#define TRIPLET     CROTCHET/3

void paschaOvo(void) {
	stopNote();         _delay_ms(CROTCHET);
	playNote(NOTE5AS);  _delay_ms(MINIM - GAP);
     9be:	86 e8       	ldi	r24, 0x86	; 134
     9c0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     9c4:	88 e9       	ldi	r24, 0x98	; 152
     9c6:	91 e2       	ldi	r25, 0x21	; 33
     9c8:	28 ec       	ldi	r18, 0xC8	; 200
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	f9 01       	movw	r30, r18
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <paschaOvo+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d4:	d9 f7       	brne	.-10     	; 0x9cc <paschaOvo+0x2e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     9d6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     9da:	5b 98       	cbi	0x0b, 3	; 11
     9dc:	80 e4       	ldi	r24, 0x40	; 64
     9de:	9c e9       	ldi	r25, 0x9C	; 156
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <paschaOvo+0x42>

void paschaOvo(void) {
	stopNote();         _delay_ms(CROTCHET);
	playNote(NOTE5AS);  _delay_ms(MINIM - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     9e4:	86 e8       	ldi	r24, 0x86	; 134
     9e6:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     9ea:	8c ee       	ldi	r24, 0xEC	; 236
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	28 ec       	ldi	r18, 0xC8	; 200
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <paschaOvo+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9fa:	d9 f7       	brne	.-10     	; 0x9f2 <paschaOvo+0x54>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     9fc:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     a00:	5b 98       	cbi	0x0b, 3	; 11
     a02:	80 e4       	ldi	r24, 0x40	; 64
     a04:	9c e9       	ldi	r25, 0x9C	; 156
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <paschaOvo+0x68>
	stopNote();         _delay_ms(CROTCHET);
	playNote(NOTE5AS);  _delay_ms(MINIM - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     a0a:	86 e8       	ldi	r24, 0x86	; 134
     a0c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     a10:	8c ee       	ldi	r24, 0xEC	; 236
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	28 ec       	ldi	r18, 0xC8	; 200
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <paschaOvo+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a20:	d9 f7       	brne	.-10     	; 0xa18 <paschaOvo+0x7a>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     a22:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     a26:	5b 98       	cbi	0x0b, 3	; 11
     a28:	80 e4       	ldi	r24, 0x40	; 64
     a2a:	9c e9       	ldi	r25, 0x9C	; 156
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <paschaOvo+0x8e>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     a30:	86 e8       	ldi	r24, 0x86	; 134
     a32:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     a36:	8c ee       	ldi	r24, 0xEC	; 236
     a38:	94 e0       	ldi	r25, 0x04	; 4
     a3a:	28 ec       	ldi	r18, 0xC8	; 200
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <paschaOvo+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a46:	d9 f7       	brne	.-10     	; 0xa3e <paschaOvo+0xa0>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     a48:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     a4c:	5b 98       	cbi	0x0b, 3	; 11
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	9c e9       	ldi	r25, 0x9C	; 156
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <paschaOvo+0xb4>
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	
	playNote(NOTE5AS);  _delay_ms(QUAVER + SEMIQUAVER);
     a56:	86 e8       	ldi	r24, 0x86	; 134
     a58:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     a5c:	84 ee       	ldi	r24, 0xE4	; 228
     a5e:	9c e0       	ldi	r25, 0x0C	; 12
     a60:	28 ec       	ldi	r18, 0xC8	; 200
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	f9 01       	movw	r30, r18
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <paschaOvo+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6c:	d9 f7       	brne	.-10     	; 0xa64 <paschaOvo+0xc6>
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
     a6e:	86 e9       	ldi	r24, 0x96	; 150
     a70:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     a74:	8c e4       	ldi	r24, 0x4C	; 76
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	28 ec       	ldi	r18, 0xC8	; 200
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <paschaOvo+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	d9 f7       	brne	.-10     	; 0xa7c <paschaOvo+0xde>
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
     a86:	86 e8       	ldi	r24, 0x86	; 134
     a88:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     a8c:	80 e3       	ldi	r24, 0x30	; 48
     a8e:	91 e1       	ldi	r25, 0x11	; 17
     a90:	28 ec       	ldi	r18, 0xC8	; 200
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	f9 01       	movw	r30, r18
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <paschaOvo+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a9c:	d9 f7       	brne	.-10     	; 0xa94 <paschaOvo+0xf6>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     a9e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     aa2:	5b 98       	cbi	0x0b, 3	; 11
     aa4:	88 e9       	ldi	r24, 0x98	; 152
     aa6:	98 e0       	ldi	r25, 0x08	; 8
     aa8:	28 ec       	ldi	r18, 0xC8	; 200
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	f9 01       	movw	r30, r18
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <paschaOvo+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab4:	d9 f7       	brne	.-10     	; 0xaac <paschaOvo+0x10e>
	
	playNote(NOTE5AS);  _delay_ms(QUAVER + SEMIQUAVER);
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     ab6:	86 e8       	ldi	r24, 0x86	; 134
     ab8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     abc:	8c ee       	ldi	r24, 0xEC	; 236
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	28 ec       	ldi	r18, 0xC8	; 200
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <paschaOvo+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     acc:	d9 f7       	brne	.-10     	; 0xac4 <paschaOvo+0x126>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     ace:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     ad2:	5b 98       	cbi	0x0b, 3	; 11
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	9c e9       	ldi	r25, 0x9C	; 156
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <paschaOvo+0x13a>
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     adc:	86 e8       	ldi	r24, 0x86	; 134
     ade:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     ae2:	8c ee       	ldi	r24, 0xEC	; 236
     ae4:	94 e0       	ldi	r25, 0x04	; 4
     ae6:	28 ec       	ldi	r18, 0xC8	; 200
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <paschaOvo+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af2:	d9 f7       	brne	.-10     	; 0xaea <paschaOvo+0x14c>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     af4:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     af8:	5b 98       	cbi	0x0b, 3	; 11
     afa:	80 e4       	ldi	r24, 0x40	; 64
     afc:	9c e9       	ldi	r25, 0x9C	; 156
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <paschaOvo+0x160>
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     b02:	86 e8       	ldi	r24, 0x86	; 134
     b04:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     b08:	8c ee       	ldi	r24, 0xEC	; 236
     b0a:	94 e0       	ldi	r25, 0x04	; 4
     b0c:	28 ec       	ldi	r18, 0xC8	; 200
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <paschaOvo+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b18:	d9 f7       	brne	.-10     	; 0xb10 <paschaOvo+0x172>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     b1a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     b1e:	5b 98       	cbi	0x0b, 3	; 11
     b20:	80 e4       	ldi	r24, 0x40	; 64
     b22:	9c e9       	ldi	r25, 0x9C	; 156
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <paschaOvo+0x186>
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	
	playNote(NOTE5AS);  _delay_ms(QUAVER + SEMIQUAVER);
     b28:	86 e8       	ldi	r24, 0x86	; 134
     b2a:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     b2e:	84 ee       	ldi	r24, 0xE4	; 228
     b30:	9c e0       	ldi	r25, 0x0C	; 12
     b32:	28 ec       	ldi	r18, 0xC8	; 200
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <paschaOvo+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b3e:	d9 f7       	brne	.-10     	; 0xb36 <paschaOvo+0x198>
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
     b40:	86 e9       	ldi	r24, 0x96	; 150
     b42:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     b46:	8c e4       	ldi	r24, 0x4C	; 76
     b48:	94 e0       	ldi	r25, 0x04	; 4
     b4a:	28 ec       	ldi	r18, 0xC8	; 200
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <paschaOvo+0x1b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b56:	d9 f7       	brne	.-10     	; 0xb4e <paschaOvo+0x1b0>
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
     b58:	86 e8       	ldi	r24, 0x86	; 134
     b5a:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     b5e:	80 e3       	ldi	r24, 0x30	; 48
     b60:	91 e1       	ldi	r25, 0x11	; 17
     b62:	28 ec       	ldi	r18, 0xC8	; 200
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <paschaOvo+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	d9 f7       	brne	.-10     	; 0xb66 <paschaOvo+0x1c8>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     b70:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     b74:	5b 98       	cbi	0x0b, 3	; 11
     b76:	88 e9       	ldi	r24, 0x98	; 152
     b78:	98 e0       	ldi	r25, 0x08	; 8
     b7a:	28 ec       	ldi	r18, 0xC8	; 200
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	f9 01       	movw	r30, r18
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <paschaOvo+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b86:	d9 f7       	brne	.-10     	; 0xb7e <paschaOvo+0x1e0>
	
	playNote(NOTE5AS);  _delay_ms(QUAVER + SEMIQUAVER);
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     b88:	86 e8       	ldi	r24, 0x86	; 134
     b8a:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     b8e:	8c ee       	ldi	r24, 0xEC	; 236
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	28 ec       	ldi	r18, 0xC8	; 200
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	f9 01       	movw	r30, r18
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <paschaOvo+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9e:	d9 f7       	brne	.-10     	; 0xb96 <paschaOvo+0x1f8>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     ba0:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     ba4:	5b 98       	cbi	0x0b, 3	; 11
     ba6:	80 e4       	ldi	r24, 0x40	; 64
     ba8:	9c e9       	ldi	r25, 0x9C	; 156
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <paschaOvo+0x20c>
	playNote(NOTE5GS);  _delay_ms(SEMIQUAVER);
	playNote(NOTE5AS);  _delay_ms(CROTCHET);
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     bae:	86 e8       	ldi	r24, 0x86	; 134
     bb0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     bb4:	8c ee       	ldi	r24, 0xEC	; 236
     bb6:	94 e0       	ldi	r25, 0x04	; 4
     bb8:	28 ec       	ldi	r18, 0xC8	; 200
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <paschaOvo+0x220>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <paschaOvo+0x21e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     bc6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     bca:	5b 98       	cbi	0x0b, 3	; 11
     bcc:	80 e4       	ldi	r24, 0x40	; 64
     bce:	9c e9       	ldi	r25, 0x9C	; 156
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <paschaOvo+0x232>
	stopNote();         _delay_ms(QUAVER);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
     bd4:	86 e8       	ldi	r24, 0x86	; 134
     bd6:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     bda:	8c ee       	ldi	r24, 0xEC	; 236
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	28 ec       	ldi	r18, 0xC8	; 200
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <paschaOvo+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bea:	d9 f7       	brne	.-10     	; 0xbe2 <paschaOvo+0x244>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     bec:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     bf0:	5b 98       	cbi	0x0b, 3	; 11
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	9c e9       	ldi	r25, 0x9C	; 156
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <paschaOvo+0x258>
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5AS);  _delay_ms(TRIPLET - GAP);
	stopNote();         _delay_ms(GAP);
	
	playNote(NOTE5AS);  _delay_ms(QUAVER);
     bfa:	86 e8       	ldi	r24, 0x86	; 134
     bfc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     c00:	88 e9       	ldi	r24, 0x98	; 152
     c02:	98 e0       	ldi	r25, 0x08	; 8
     c04:	28 ec       	ldi	r18, 0xC8	; 200
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	f9 01       	movw	r30, r18
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <paschaOvo+0x26c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	d9 f7       	brne	.-10     	; 0xc08 <paschaOvo+0x26a>
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
     c12:	83 eb       	ldi	r24, 0xB3	; 179
     c14:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     c18:	84 e8       	ldi	r24, 0x84	; 132
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	28 ec       	ldi	r18, 0xC8	; 200
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <paschaOvo+0x284>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c28:	d9 f7       	brne	.-10     	; 0xc20 <paschaOvo+0x282>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     c2a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     c2e:	5b 98       	cbi	0x0b, 3	; 11
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	9c e9       	ldi	r25, 0x9C	; 156
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <paschaOvo+0x296>
	stopNote();         _delay_ms(GAP);
	
	playNote(NOTE5AS);  _delay_ms(QUAVER);
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
     c38:	83 eb       	ldi	r24, 0xB3	; 179
     c3a:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     c3e:	84 e8       	ldi	r24, 0x84	; 132
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	28 ec       	ldi	r18, 0xC8	; 200
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	f9 01       	movw	r30, r18
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <paschaOvo+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4e:	d9 f7       	brne	.-10     	; 0xc46 <paschaOvo+0x2a8>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     c50:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     c54:	5b 98       	cbi	0x0b, 3	; 11
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	9c e9       	ldi	r25, 0x9C	; 156
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <paschaOvo+0x2bc>
	playNote(NOTE5AS);  _delay_ms(QUAVER);
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     c5e:	83 eb       	ldi	r24, 0xB3	; 179
     c60:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     c64:	80 ed       	ldi	r24, 0xD0	; 208
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	28 ec       	ldi	r18, 0xC8	; 200
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	f9 01       	movw	r30, r18
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <paschaOvo+0x2d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c74:	d9 f7       	brne	.-10     	; 0xc6c <paschaOvo+0x2ce>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     c76:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     c7a:	5b 98       	cbi	0x0b, 3	; 11
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	9c e9       	ldi	r25, 0x9C	; 156
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <paschaOvo+0x2e2>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     c84:	83 eb       	ldi	r24, 0xB3	; 179
     c86:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     c8a:	80 ed       	ldi	r24, 0xD0	; 208
     c8c:	97 e0       	ldi	r25, 0x07	; 7
     c8e:	28 ec       	ldi	r18, 0xC8	; 200
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <paschaOvo+0x2f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9a:	d9 f7       	brne	.-10     	; 0xc92 <paschaOvo+0x2f4>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     c9c:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     ca0:	5b 98       	cbi	0x0b, 3	; 11
     ca2:	80 e4       	ldi	r24, 0x40	; 64
     ca4:	9c e9       	ldi	r25, 0x9C	; 156
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <paschaOvo+0x308>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     caa:	83 eb       	ldi	r24, 0xB3	; 179
     cac:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     cb0:	80 ed       	ldi	r24, 0xD0	; 208
     cb2:	97 e0       	ldi	r25, 0x07	; 7
     cb4:	28 ec       	ldi	r18, 0xC8	; 200
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <paschaOvo+0x31c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <paschaOvo+0x31a>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     cc2:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     cc6:	5b 98       	cbi	0x0b, 3	; 11
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	9c e9       	ldi	r25, 0x9C	; 156
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <paschaOvo+0x32e>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     cd0:	83 eb       	ldi	r24, 0xB3	; 179
     cd2:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     cd6:	80 ed       	ldi	r24, 0xD0	; 208
     cd8:	97 e0       	ldi	r25, 0x07	; 7
     cda:	28 ec       	ldi	r18, 0xC8	; 200
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <paschaOvo+0x342>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce6:	d9 f7       	brne	.-10     	; 0xcde <paschaOvo+0x340>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     ce8:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     cec:	5b 98       	cbi	0x0b, 3	; 11
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	9c e9       	ldi	r25, 0x9C	; 156
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <paschaOvo+0x354>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     cf6:	83 eb       	ldi	r24, 0xB3	; 179
     cf8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     cfc:	80 ed       	ldi	r24, 0xD0	; 208
     cfe:	97 e0       	ldi	r25, 0x07	; 7
     d00:	28 ec       	ldi	r18, 0xC8	; 200
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <paschaOvo+0x368>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <paschaOvo+0x366>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     d0e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     d12:	5b 98       	cbi	0x0b, 3	; 11
     d14:	80 e4       	ldi	r24, 0x40	; 64
     d16:	9c e9       	ldi	r25, 0x9C	; 156
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <paschaOvo+0x37a>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
     d1c:	83 eb       	ldi	r24, 0xB3	; 179
     d1e:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     d22:	80 ed       	ldi	r24, 0xD0	; 208
     d24:	97 e0       	ldi	r25, 0x07	; 7
     d26:	28 ec       	ldi	r18, 0xC8	; 200
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	f9 01       	movw	r30, r18
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <paschaOvo+0x38e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	d9 f7       	brne	.-10     	; 0xd2a <paschaOvo+0x38c>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     d34:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     d38:	5b 98       	cbi	0x0b, 3	; 11
     d3a:	80 e4       	ldi	r24, 0x40	; 64
     d3c:	9c e9       	ldi	r25, 0x9C	; 156
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <paschaOvo+0x3a0>
	stopNote();         _delay_ms(GAP);
	playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
	stopNote();         _delay_ms(GAP);
	
	while(1) {
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
     d42:	c8 ec       	ldi	r28, 0xC8	; 200
     d44:	d0 e0       	ldi	r29, 0x00	; 0
     d46:	00 e4       	ldi	r16, 0x40	; 64
     d48:	1c e9       	ldi	r17, 0x9C	; 156
     d4a:	86 e8       	ldi	r24, 0x86	; 134
     d4c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     d50:	8c e4       	ldi	r24, 0x4C	; 76
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	fe 01       	movw	r30, r28
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <paschaOvo+0x3b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	d9 f7       	brne	.-10     	; 0xd54 <paschaOvo+0x3b6>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     d5e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     d62:	5b 98       	cbi	0x0b, 3	; 11
     d64:	84 ee       	ldi	r24, 0xE4	; 228
     d66:	9c e0       	ldi	r25, 0x0C	; 12
     d68:	fe 01       	movw	r30, r28
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <paschaOvo+0x3cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	d9 f7       	brne	.-10     	; 0xd68 <paschaOvo+0x3ca>
	stopNote();         _delay_ms(GAP);
	
	while(1) {
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE5F);   _delay_ms(CROTCHET + QUAVER);
     d72:	83 eb       	ldi	r24, 0xB3	; 179
     d74:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	99 e1       	ldi	r25, 0x19	; 25
     d7c:	fe 01       	movw	r30, r28
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <paschaOvo+0x3e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	d9 f7       	brne	.-10     	; 0xd7c <paschaOvo+0x3de>
		playNote(NOTE5AS);  _delay_ms(QUAVER - GAP);
     d86:	86 e8       	ldi	r24, 0x86	; 134
     d88:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     d8c:	80 ed       	ldi	r24, 0xD0	; 208
     d8e:	97 e0       	ldi	r25, 0x07	; 7
     d90:	fe 01       	movw	r30, r28
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <paschaOvo+0x3f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d98:	d9 f7       	brne	.-10     	; 0xd90 <paschaOvo+0x3f2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     d9a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     d9e:	5b 98       	cbi	0x0b, 3	; 11
     da0:	c8 01       	movw	r24, r16
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <paschaOvo+0x404>
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE5F);   _delay_ms(CROTCHET + QUAVER);
		playNote(NOTE5AS);  _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
     da6:	86 e8       	ldi	r24, 0x86	; 134
     da8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     dac:	8c e4       	ldi	r24, 0x4C	; 76
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	fe 01       	movw	r30, r28
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <paschaOvo+0x414>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	d9 f7       	brne	.-10     	; 0xdb0 <paschaOvo+0x412>
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
     dba:	87 e7       	ldi	r24, 0x77	; 119
     dbc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     dc0:	8c e4       	ldi	r24, 0x4C	; 76
     dc2:	94 e0       	ldi	r25, 0x04	; 4
     dc4:	fe 01       	movw	r30, r28
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <paschaOvo+0x428>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	d9 f7       	brne	.-10     	; 0xdc4 <paschaOvo+0x426>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
     dce:	8a e6       	ldi	r24, 0x6A	; 106
     dd0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     dd4:	8c e4       	ldi	r24, 0x4C	; 76
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	fe 01       	movw	r30, r28
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <paschaOvo+0x43c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <paschaOvo+0x43a>
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
     de2:	84 e6       	ldi	r24, 0x64	; 100
     de4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     de8:	8c e4       	ldi	r24, 0x4C	; 76
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	fe 01       	movw	r30, r28
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <paschaOvo+0x450>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	d9 f7       	brne	.-10     	; 0xdec <paschaOvo+0x44e>
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
     df6:	89 e5       	ldi	r24, 0x59	; 89
     df8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     dfc:	88 e9       	ldi	r24, 0x98	; 152
     dfe:	91 e2       	ldi	r25, 0x21	; 33
     e00:	fe 01       	movw	r30, r28
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <paschaOvo+0x464>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	d9 f7       	brne	.-10     	; 0xe00 <paschaOvo+0x462>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     e0a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     e0e:	5b 98       	cbi	0x0b, 3	; 11
     e10:	c8 01       	movw	r24, r16
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <paschaOvo+0x474>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
     e16:	89 e5       	ldi	r24, 0x59	; 89
     e18:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e1c:	80 ed       	ldi	r24, 0xD0	; 208
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	fe 01       	movw	r30, r28
     e22:	31 97       	sbiw	r30, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <paschaOvo+0x484>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	d9 f7       	brne	.-10     	; 0xe20 <paschaOvo+0x482>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     e2a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     e2e:	5b 98       	cbi	0x0b, 3	; 11
     e30:	c8 01       	movw	r24, r16
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <paschaOvo+0x494>
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
     e36:	89 e5       	ldi	r24, 0x59	; 89
     e38:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e3c:	80 ed       	ldi	r24, 0xD0	; 208
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	fe 01       	movw	r30, r28
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <paschaOvo+0x4a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	d9 f7       	brne	.-10     	; 0xe40 <paschaOvo+0x4a2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     e4a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     e4e:	5b 98       	cbi	0x0b, 3	; 11
     e50:	c8 01       	movw	r24, r16
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <paschaOvo+0x4b4>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(TRIPLET);
     e56:	89 e5       	ldi	r24, 0x59	; 89
     e58:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e5c:	84 eb       	ldi	r24, 0xB4	; 180
     e5e:	95 e0       	ldi	r25, 0x05	; 5
     e60:	fe 01       	movw	r30, r28
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <paschaOvo+0x4c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	d9 f7       	brne	.-10     	; 0xe60 <paschaOvo+0x4c2>
		playNote(NOTE6FS);  _delay_ms(TRIPLET);
     e6a:	84 e5       	ldi	r24, 0x54	; 84
     e6c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e70:	84 eb       	ldi	r24, 0xB4	; 180
     e72:	95 e0       	ldi	r25, 0x05	; 5
     e74:	fe 01       	movw	r30, r28
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <paschaOvo+0x4d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	d9 f7       	brne	.-10     	; 0xe74 <paschaOvo+0x4d6>
		playNote(NOTE6GS);  _delay_ms(TRIPLET);
     e7e:	8b e4       	ldi	r24, 0x4B	; 75
     e80:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e84:	84 eb       	ldi	r24, 0xB4	; 180
     e86:	95 e0       	ldi	r25, 0x05	; 5
     e88:	fe 01       	movw	r30, r28
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <paschaOvo+0x4ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e90:	d9 f7       	brne	.-10     	; 0xe88 <paschaOvo+0x4ea>
		
		playNote(NOTE6AS);  _delay_ms(MINIM + QUAVER - GAP);
     e92:	83 e4       	ldi	r24, 0x43	; 67
     e94:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	9a e2       	ldi	r25, 0x2A	; 42
     e9c:	fe 01       	movw	r30, r28
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <paschaOvo+0x500>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <paschaOvo+0x4fe>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     ea6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     eaa:	5b 98       	cbi	0x0b, 3	; 11
     eac:	c8 01       	movw	r24, r16
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <paschaOvo+0x510>
		playNote(NOTE6FS);  _delay_ms(TRIPLET);
		playNote(NOTE6GS);  _delay_ms(TRIPLET);
		
		playNote(NOTE6AS);  _delay_ms(MINIM + QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6AS);  _delay_ms(QUAVER - GAP);
     eb2:	83 e4       	ldi	r24, 0x43	; 67
     eb4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     eb8:	80 ed       	ldi	r24, 0xD0	; 208
     eba:	97 e0       	ldi	r25, 0x07	; 7
     ebc:	fe 01       	movw	r30, r28
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <paschaOvo+0x520>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec4:	d9 f7       	brne	.-10     	; 0xebc <paschaOvo+0x51e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     ec6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     eca:	5b 98       	cbi	0x0b, 3	; 11
     ecc:	c8 01       	movw	r24, r16
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <paschaOvo+0x530>
		
		playNote(NOTE6AS);  _delay_ms(MINIM + QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6AS);  _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6AS);  _delay_ms(TRIPLET);
     ed2:	83 e4       	ldi	r24, 0x43	; 67
     ed4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     ed8:	84 eb       	ldi	r24, 0xB4	; 180
     eda:	95 e0       	ldi	r25, 0x05	; 5
     edc:	fe 01       	movw	r30, r28
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <paschaOvo+0x540>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	d9 f7       	brne	.-10     	; 0xedc <paschaOvo+0x53e>
		playNote(NOTE6GS);  _delay_ms(TRIPLET);
     ee6:	8b e4       	ldi	r24, 0x4B	; 75
     ee8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     eec:	84 eb       	ldi	r24, 0xB4	; 180
     eee:	95 e0       	ldi	r25, 0x05	; 5
     ef0:	fe 01       	movw	r30, r28
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <paschaOvo+0x554>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	d9 f7       	brne	.-10     	; 0xef0 <paschaOvo+0x552>
		playNote(NOTE6FS);  _delay_ms(TRIPLET);
     efa:	84 e5       	ldi	r24, 0x54	; 84
     efc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f00:	84 eb       	ldi	r24, 0xB4	; 180
     f02:	95 e0       	ldi	r25, 0x05	; 5
     f04:	fe 01       	movw	r30, r28
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <paschaOvo+0x568>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	d9 f7       	brne	.-10     	; 0xf04 <paschaOvo+0x566>
		
		playNote(NOTE6GS);  _delay_ms(QUAVER + SEMIQUAVER);
     f0e:	8b e4       	ldi	r24, 0x4B	; 75
     f10:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f14:	84 ee       	ldi	r24, 0xE4	; 228
     f16:	9c e0       	ldi	r25, 0x0C	; 12
     f18:	fe 01       	movw	r30, r28
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <paschaOvo+0x57c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	d9 f7       	brne	.-10     	; 0xf18 <paschaOvo+0x57a>
		playNote(NOTE6FS);  _delay_ms(SEMIQUAVER);
     f22:	84 e5       	ldi	r24, 0x54	; 84
     f24:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f28:	8c e4       	ldi	r24, 0x4C	; 76
     f2a:	94 e0       	ldi	r25, 0x04	; 4
     f2c:	fe 01       	movw	r30, r28
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <paschaOvo+0x590>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	d9 f7       	brne	.-10     	; 0xf2c <paschaOvo+0x58e>
		playNote(NOTE6F);   _delay_ms(CROTCHET + QUAVER);
     f36:	89 e5       	ldi	r24, 0x59	; 89
     f38:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	99 e1       	ldi	r25, 0x19	; 25
     f40:	fe 01       	movw	r30, r28
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <paschaOvo+0x5a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	d9 f7       	brne	.-10     	; 0xf40 <paschaOvo+0x5a2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     f4a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     f4e:	5b 98       	cbi	0x0b, 3	; 11
     f50:	88 e9       	ldi	r24, 0x98	; 152
     f52:	98 e0       	ldi	r25, 0x08	; 8
     f54:	fe 01       	movw	r30, r28
     f56:	31 97       	sbiw	r30, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <paschaOvo+0x5b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5c:	d9 f7       	brne	.-10     	; 0xf54 <paschaOvo+0x5b6>
		
		playNote(NOTE6GS);  _delay_ms(QUAVER + SEMIQUAVER);
		playNote(NOTE6FS);  _delay_ms(SEMIQUAVER);
		playNote(NOTE6F);   _delay_ms(CROTCHET + QUAVER);
		stopNote();         _delay_ms(QUAVER);
		playNote(NOTE6F);   _delay_ms(CROTCHET);
     f5e:	89 e5       	ldi	r24, 0x59	; 89
     f60:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f64:	80 e3       	ldi	r24, 0x30	; 48
     f66:	91 e1       	ldi	r25, 0x11	; 17
     f68:	fe 01       	movw	r30, r28
     f6a:	31 97       	sbiw	r30, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <paschaOvo+0x5cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	d9 f7       	brne	.-10     	; 0xf68 <paschaOvo+0x5ca>
		
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     f78:	8c e4       	ldi	r24, 0x4C	; 76
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	fe 01       	movw	r30, r28
     f7e:	31 97       	sbiw	r30, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <paschaOvo+0x5e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	d9 f7       	brne	.-10     	; 0xf7c <paschaOvo+0x5de>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
     f86:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
     f8a:	5b 98       	cbi	0x0b, 3	; 11
     f8c:	8c e4       	ldi	r24, 0x4C	; 76
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	fe 01       	movw	r30, r28
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <paschaOvo+0x5f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	d9 f7       	brne	.-10     	; 0xf90 <paschaOvo+0x5f2>
		stopNote();         _delay_ms(QUAVER);
		playNote(NOTE6F);   _delay_ms(CROTCHET);
		
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER);
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
     f9a:	84 e6       	ldi	r24, 0x64	; 100
     f9c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     fa0:	8c e4       	ldi	r24, 0x4C	; 76
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	fe 01       	movw	r30, r28
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <paschaOvo+0x608>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     faa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fac:	d9 f7       	brne	.-10     	; 0xfa4 <paschaOvo+0x606>
		playNote(NOTE6F);   _delay_ms(SEMIQUAVER);
     fae:	89 e5       	ldi	r24, 0x59	; 89
     fb0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     fb4:	8c e4       	ldi	r24, 0x4C	; 76
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	fe 01       	movw	r30, r28
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <paschaOvo+0x61c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	d9 f7       	brne	.-10     	; 0xfb8 <paschaOvo+0x61a>
		playNote(NOTE6FS);  _delay_ms(MINIM);
     fc2:	84 e5       	ldi	r24, 0x54	; 84
     fc4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     fc8:	80 e6       	ldi	r24, 0x60	; 96
     fca:	92 e2       	ldi	r25, 0x22	; 34
     fcc:	fe 01       	movw	r30, r28
     fce:	31 97       	sbiw	r30, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <paschaOvo+0x630>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <paschaOvo+0x62e>
		playNote(NOTE6F);   _delay_ms(QUAVER);
     fd6:	89 e5       	ldi	r24, 0x59	; 89
     fd8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     fdc:	88 e9       	ldi	r24, 0x98	; 152
     fde:	98 e0       	ldi	r25, 0x08	; 8
     fe0:	fe 01       	movw	r30, r28
     fe2:	31 97       	sbiw	r30, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <paschaOvo+0x644>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <paschaOvo+0x642>
		playNote(NOTE6DS);  _delay_ms(QUAVER);
     fea:	84 e6       	ldi	r24, 0x64	; 100
     fec:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
     ff0:	88 e9       	ldi	r24, 0x98	; 152
     ff2:	98 e0       	ldi	r25, 0x08	; 8
     ff4:	fe 01       	movw	r30, r28
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <paschaOvo+0x658>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <paschaOvo+0x656>
		
		playNote(NOTE6CS);  _delay_ms(SEMIQUAVER);
     ffe:	81 e7       	ldi	r24, 0x71	; 113
    1000:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1004:	8c e4       	ldi	r24, 0x4C	; 76
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	fe 01       	movw	r30, r28
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <paschaOvo+0x66c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1010:	d9 f7       	brne	.-10     	; 0x1008 <paschaOvo+0x66a>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    1012:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    1016:	5b 98       	cbi	0x0b, 3	; 11
    1018:	8c e4       	ldi	r24, 0x4C	; 76
    101a:	94 e0       	ldi	r25, 0x04	; 4
    101c:	fe 01       	movw	r30, r28
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <paschaOvo+0x680>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	d9 f7       	brne	.-10     	; 0x101c <paschaOvo+0x67e>
		playNote(NOTE6F);   _delay_ms(QUAVER);
		playNote(NOTE6DS);  _delay_ms(QUAVER);
		
		playNote(NOTE6CS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER);
		playNote(NOTE6CS);  _delay_ms(SEMIQUAVER);
    1026:	81 e7       	ldi	r24, 0x71	; 113
    1028:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    102c:	8c e4       	ldi	r24, 0x4C	; 76
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	fe 01       	movw	r30, r28
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <paschaOvo+0x694>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1038:	d9 f7       	brne	.-10     	; 0x1030 <paschaOvo+0x692>
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
    103a:	84 e6       	ldi	r24, 0x64	; 100
    103c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1040:	8c e4       	ldi	r24, 0x4C	; 76
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	fe 01       	movw	r30, r28
    1046:	31 97       	sbiw	r30, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <paschaOvo+0x6a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	d9 f7       	brne	.-10     	; 0x1044 <paschaOvo+0x6a6>
		playNote(NOTE6F);   _delay_ms(MINIM);
    104e:	89 e5       	ldi	r24, 0x59	; 89
    1050:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1054:	80 e6       	ldi	r24, 0x60	; 96
    1056:	92 e2       	ldi	r25, 0x22	; 34
    1058:	fe 01       	movw	r30, r28
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <paschaOvo+0x6bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	d9 f7       	brne	.-10     	; 0x1058 <paschaOvo+0x6ba>
		playNote(NOTE6DS);  _delay_ms(QUAVER);
    1062:	84 e6       	ldi	r24, 0x64	; 100
    1064:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1068:	88 e9       	ldi	r24, 0x98	; 152
    106a:	98 e0       	ldi	r25, 0x08	; 8
    106c:	fe 01       	movw	r30, r28
    106e:	31 97       	sbiw	r30, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <paschaOvo+0x6d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	d9 f7       	brne	.-10     	; 0x106c <paschaOvo+0x6ce>
		playNote(NOTE6CS);  _delay_ms(QUAVER);
    1076:	81 e7       	ldi	r24, 0x71	; 113
    1078:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    107c:	88 e9       	ldi	r24, 0x98	; 152
    107e:	98 e0       	ldi	r25, 0x08	; 8
    1080:	fe 01       	movw	r30, r28
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <paschaOvo+0x6e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	d9 f7       	brne	.-10     	; 0x1080 <paschaOvo+0x6e2>
		
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
    108a:	87 e7       	ldi	r24, 0x77	; 119
    108c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1090:	8c e4       	ldi	r24, 0x4C	; 76
    1092:	94 e0       	ldi	r25, 0x04	; 4
    1094:	fe 01       	movw	r30, r28
    1096:	31 97       	sbiw	r30, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <paschaOvo+0x6f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	d9 f7       	brne	.-10     	; 0x1094 <paschaOvo+0x6f6>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    109e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    10a2:	5b 98       	cbi	0x0b, 3	; 11
    10a4:	8c e4       	ldi	r24, 0x4C	; 76
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	fe 01       	movw	r30, r28
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <paschaOvo+0x70c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	d9 f7       	brne	.-10     	; 0x10a8 <paschaOvo+0x70a>
		playNote(NOTE6DS);  _delay_ms(QUAVER);
		playNote(NOTE6CS);  _delay_ms(QUAVER);
		
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER);
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
    10b2:	87 e7       	ldi	r24, 0x77	; 119
    10b4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    10b8:	8c e4       	ldi	r24, 0x4C	; 76
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	fe 01       	movw	r30, r28
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <paschaOvo+0x720>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	d9 f7       	brne	.-10     	; 0x10bc <paschaOvo+0x71e>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
    10c6:	8a e6       	ldi	r24, 0x6A	; 106
    10c8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    10cc:	8c e4       	ldi	r24, 0x4C	; 76
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	fe 01       	movw	r30, r28
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <paschaOvo+0x734>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	d9 f7       	brne	.-10     	; 0x10d0 <paschaOvo+0x732>
		playNote(NOTE6E);   _delay_ms(MINIM);
    10da:	8f e5       	ldi	r24, 0x5F	; 95
    10dc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    10e0:	80 e6       	ldi	r24, 0x60	; 96
    10e2:	92 e2       	ldi	r25, 0x22	; 34
    10e4:	fe 01       	movw	r30, r28
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <paschaOvo+0x748>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	d9 f7       	brne	.-10     	; 0x10e4 <paschaOvo+0x746>
		playNote(NOTE6G);   _delay_ms(CROTCHET);
    10ee:	80 e5       	ldi	r24, 0x50	; 80
    10f0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    10f4:	80 e3       	ldi	r24, 0x30	; 48
    10f6:	91 e1       	ldi	r25, 0x11	; 17
    10f8:	fe 01       	movw	r30, r28
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <paschaOvo+0x75c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	d9 f7       	brne	.-10     	; 0x10f8 <paschaOvo+0x75a>
		
		playNote(NOTE6F);   _delay_ms(QUAVER);
    1102:	89 e5       	ldi	r24, 0x59	; 89
    1104:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1108:	88 e9       	ldi	r24, 0x98	; 152
    110a:	98 e0       	ldi	r25, 0x08	; 8
    110c:	fe 01       	movw	r30, r28
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <paschaOvo+0x770>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	d9 f7       	brne	.-10     	; 0x110c <paschaOvo+0x76e>
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1116:	83 eb       	ldi	r24, 0xB3	; 179
    1118:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    111c:	84 e8       	ldi	r24, 0x84	; 132
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	fe 01       	movw	r30, r28
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <paschaOvo+0x784>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1128:	d9 f7       	brne	.-10     	; 0x1120 <paschaOvo+0x782>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    112a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    112e:	5b 98       	cbi	0x0b, 3	; 11
    1130:	c8 01       	movw	r24, r16
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <paschaOvo+0x794>
		playNote(NOTE6G);   _delay_ms(CROTCHET);
		
		playNote(NOTE6F);   _delay_ms(QUAVER);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1136:	83 eb       	ldi	r24, 0xB3	; 179
    1138:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    113c:	84 e8       	ldi	r24, 0x84	; 132
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	fe 01       	movw	r30, r28
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <paschaOvo+0x7a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	d9 f7       	brne	.-10     	; 0x1140 <paschaOvo+0x7a2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    114a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    114e:	5b 98       	cbi	0x0b, 3	; 11
    1150:	c8 01       	movw	r24, r16
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <paschaOvo+0x7b4>
		playNote(NOTE6F);   _delay_ms(QUAVER);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1156:	83 eb       	ldi	r24, 0xB3	; 179
    1158:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    115c:	80 ed       	ldi	r24, 0xD0	; 208
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	fe 01       	movw	r30, r28
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <paschaOvo+0x7c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1168:	d9 f7       	brne	.-10     	; 0x1160 <paschaOvo+0x7c2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    116a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    116e:	5b 98       	cbi	0x0b, 3	; 11
    1170:	c8 01       	movw	r24, r16
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <paschaOvo+0x7d4>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1176:	83 eb       	ldi	r24, 0xB3	; 179
    1178:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    117c:	84 e8       	ldi	r24, 0x84	; 132
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	fe 01       	movw	r30, r28
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <paschaOvo+0x7e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	d9 f7       	brne	.-10     	; 0x1180 <paschaOvo+0x7e2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    118a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    118e:	5b 98       	cbi	0x0b, 3	; 11
    1190:	c8 01       	movw	r24, r16
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <paschaOvo+0x7f4>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1196:	83 eb       	ldi	r24, 0xB3	; 179
    1198:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    119c:	84 e8       	ldi	r24, 0x84	; 132
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	fe 01       	movw	r30, r28
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <paschaOvo+0x804>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a8:	d9 f7       	brne	.-10     	; 0x11a0 <paschaOvo+0x802>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    11aa:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    11ae:	5b 98       	cbi	0x0b, 3	; 11
    11b0:	c8 01       	movw	r24, r16
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <paschaOvo+0x814>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    11b6:	83 eb       	ldi	r24, 0xB3	; 179
    11b8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    11bc:	80 ed       	ldi	r24, 0xD0	; 208
    11be:	97 e0       	ldi	r25, 0x07	; 7
    11c0:	fe 01       	movw	r30, r28
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <paschaOvo+0x824>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	d9 f7       	brne	.-10     	; 0x11c0 <paschaOvo+0x822>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    11ca:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    11ce:	5b 98       	cbi	0x0b, 3	; 11
    11d0:	c8 01       	movw	r24, r16
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <paschaOvo+0x834>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    11d6:	83 eb       	ldi	r24, 0xB3	; 179
    11d8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    11dc:	84 e8       	ldi	r24, 0x84	; 132
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	fe 01       	movw	r30, r28
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <paschaOvo+0x844>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	d9 f7       	brne	.-10     	; 0x11e0 <paschaOvo+0x842>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    11ea:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    11ee:	5b 98       	cbi	0x0b, 3	; 11
    11f0:	c8 01       	movw	r24, r16
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <paschaOvo+0x854>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    11f6:	83 eb       	ldi	r24, 0xB3	; 179
    11f8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    11fc:	84 e8       	ldi	r24, 0x84	; 132
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	fe 01       	movw	r30, r28
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <paschaOvo+0x864>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1208:	d9 f7       	brne	.-10     	; 0x1200 <paschaOvo+0x862>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    120a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    120e:	5b 98       	cbi	0x0b, 3	; 11
    1210:	c8 01       	movw	r24, r16
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <paschaOvo+0x874>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1216:	83 eb       	ldi	r24, 0xB3	; 179
    1218:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    121c:	80 ed       	ldi	r24, 0xD0	; 208
    121e:	97 e0       	ldi	r25, 0x07	; 7
    1220:	fe 01       	movw	r30, r28
    1222:	31 97       	sbiw	r30, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <paschaOvo+0x884>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	d9 f7       	brne	.-10     	; 0x1220 <paschaOvo+0x882>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    122a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    122e:	5b 98       	cbi	0x0b, 3	; 11
    1230:	c8 01       	movw	r24, r16
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <paschaOvo+0x894>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1236:	83 eb       	ldi	r24, 0xB3	; 179
    1238:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    123c:	80 ed       	ldi	r24, 0xD0	; 208
    123e:	97 e0       	ldi	r25, 0x07	; 7
    1240:	fe 01       	movw	r30, r28
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <paschaOvo+0x8a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1248:	d9 f7       	brne	.-10     	; 0x1240 <paschaOvo+0x8a2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    124a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    124e:	5b 98       	cbi	0x0b, 3	; 11
    1250:	c8 01       	movw	r24, r16
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <paschaOvo+0x8b4>
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
    1256:	86 e8       	ldi	r24, 0x86	; 134
    1258:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    125c:	8c e4       	ldi	r24, 0x4C	; 76
    125e:	94 e0       	ldi	r25, 0x04	; 4
    1260:	fe 01       	movw	r30, r28
    1262:	31 97       	sbiw	r30, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <paschaOvo+0x8c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1268:	d9 f7       	brne	.-10     	; 0x1260 <paschaOvo+0x8c2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    126a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    126e:	5b 98       	cbi	0x0b, 3	; 11
    1270:	84 ee       	ldi	r24, 0xE4	; 228
    1272:	9c e0       	ldi	r25, 0x0C	; 12
    1274:	fe 01       	movw	r30, r28
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <paschaOvo+0x8d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	d9 f7       	brne	.-10     	; 0x1274 <paschaOvo+0x8d6>
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE5F);   _delay_ms(CROTCHET + QUAVER);
    127e:	83 eb       	ldi	r24, 0xB3	; 179
    1280:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1284:	88 ec       	ldi	r24, 0xC8	; 200
    1286:	99 e1       	ldi	r25, 0x19	; 25
    1288:	fe 01       	movw	r30, r28
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <paschaOvo+0x8ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	d9 f7       	brne	.-10     	; 0x1288 <paschaOvo+0x8ea>
		playNote(NOTE5AS);  _delay_ms(QUAVER - GAP);
    1292:	86 e8       	ldi	r24, 0x86	; 134
    1294:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1298:	80 ed       	ldi	r24, 0xD0	; 208
    129a:	97 e0       	ldi	r25, 0x07	; 7
    129c:	fe 01       	movw	r30, r28
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <paschaOvo+0x900>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	d9 f7       	brne	.-10     	; 0x129c <paschaOvo+0x8fe>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    12a6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    12aa:	5b 98       	cbi	0x0b, 3	; 11
    12ac:	c8 01       	movw	r24, r16
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <paschaOvo+0x910>
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE5F);   _delay_ms(CROTCHET + QUAVER);
		playNote(NOTE5AS);  _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5AS);  _delay_ms(SEMIQUAVER);
    12b2:	86 e8       	ldi	r24, 0x86	; 134
    12b4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    12b8:	8c e4       	ldi	r24, 0x4C	; 76
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	fe 01       	movw	r30, r28
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <paschaOvo+0x920>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c4:	d9 f7       	brne	.-10     	; 0x12bc <paschaOvo+0x91e>
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
    12c6:	87 e7       	ldi	r24, 0x77	; 119
    12c8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    12cc:	8c e4       	ldi	r24, 0x4C	; 76
    12ce:	94 e0       	ldi	r25, 0x04	; 4
    12d0:	fe 01       	movw	r30, r28
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <paschaOvo+0x934>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d8:	d9 f7       	brne	.-10     	; 0x12d0 <paschaOvo+0x932>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
    12da:	8a e6       	ldi	r24, 0x6A	; 106
    12dc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    12e0:	8c e4       	ldi	r24, 0x4C	; 76
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	fe 01       	movw	r30, r28
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <paschaOvo+0x948>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ec:	d9 f7       	brne	.-10     	; 0x12e4 <paschaOvo+0x946>
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
    12ee:	84 e6       	ldi	r24, 0x64	; 100
    12f0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    12f4:	8c e4       	ldi	r24, 0x4C	; 76
    12f6:	94 e0       	ldi	r25, 0x04	; 4
    12f8:	fe 01       	movw	r30, r28
    12fa:	31 97       	sbiw	r30, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <paschaOvo+0x95c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	d9 f7       	brne	.-10     	; 0x12f8 <paschaOvo+0x95a>
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
    1302:	89 e5       	ldi	r24, 0x59	; 89
    1304:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1308:	88 e9       	ldi	r24, 0x98	; 152
    130a:	91 e2       	ldi	r25, 0x21	; 33
    130c:	fe 01       	movw	r30, r28
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <paschaOvo+0x970>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	d9 f7       	brne	.-10     	; 0x130c <paschaOvo+0x96e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    1316:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    131a:	5b 98       	cbi	0x0b, 3	; 11
    131c:	c8 01       	movw	r24, r16
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <paschaOvo+0x980>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
		playNote(NOTE6DS);  _delay_ms(SEMIQUAVER);
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
    1322:	89 e5       	ldi	r24, 0x59	; 89
    1324:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1328:	80 ed       	ldi	r24, 0xD0	; 208
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	fe 01       	movw	r30, r28
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <paschaOvo+0x990>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	d9 f7       	brne	.-10     	; 0x132c <paschaOvo+0x98e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    1336:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    133a:	5b 98       	cbi	0x0b, 3	; 11
    133c:	c8 01       	movw	r24, r16
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <paschaOvo+0x9a0>
		
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
    1342:	89 e5       	ldi	r24, 0x59	; 89
    1344:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1348:	80 ed       	ldi	r24, 0xD0	; 208
    134a:	97 e0       	ldi	r25, 0x07	; 7
    134c:	fe 01       	movw	r30, r28
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <paschaOvo+0x9b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	d9 f7       	brne	.-10     	; 0x134c <paschaOvo+0x9ae>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    1356:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    135a:	5b 98       	cbi	0x0b, 3	; 11
    135c:	c8 01       	movw	r24, r16
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <paschaOvo+0x9c0>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(TRIPLET);
    1362:	89 e5       	ldi	r24, 0x59	; 89
    1364:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1368:	84 eb       	ldi	r24, 0xB4	; 180
    136a:	95 e0       	ldi	r25, 0x05	; 5
    136c:	fe 01       	movw	r30, r28
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <paschaOvo+0x9d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1372:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	d9 f7       	brne	.-10     	; 0x136c <paschaOvo+0x9ce>
		playNote(NOTE6FS);  _delay_ms(TRIPLET);
    1376:	84 e5       	ldi	r24, 0x54	; 84
    1378:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    137c:	84 eb       	ldi	r24, 0xB4	; 180
    137e:	95 e0       	ldi	r25, 0x05	; 5
    1380:	fe 01       	movw	r30, r28
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <paschaOvo+0x9e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	d9 f7       	brne	.-10     	; 0x1380 <paschaOvo+0x9e2>
		playNote(NOTE6GS);  _delay_ms(TRIPLET);
    138a:	8b e4       	ldi	r24, 0x4B	; 75
    138c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1390:	84 eb       	ldi	r24, 0xB4	; 180
    1392:	95 e0       	ldi	r25, 0x05	; 5
    1394:	fe 01       	movw	r30, r28
    1396:	31 97       	sbiw	r30, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <paschaOvo+0x9f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	d9 f7       	brne	.-10     	; 0x1394 <paschaOvo+0x9f6>
		
		playNote(NOTE6AS);  _delay_ms(MINIM + CROTCHET);
    139e:	83 e4       	ldi	r24, 0x43	; 67
    13a0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    13a4:	80 e9       	ldi	r24, 0x90	; 144
    13a6:	93 e3       	ldi	r25, 0x33	; 51
    13a8:	fe 01       	movw	r30, r28
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <paschaOvo+0xa0c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b0:	d9 f7       	brne	.-10     	; 0x13a8 <paschaOvo+0xa0a>
		playNote(NOTE7CS);  _delay_ms(CROTCHET);
    13b2:	88 e3       	ldi	r24, 0x38	; 56
    13b4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	91 e1       	ldi	r25, 0x11	; 17
    13bc:	fe 01       	movw	r30, r28
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <paschaOvo+0xa20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	d9 f7       	brne	.-10     	; 0x13bc <paschaOvo+0xa1e>
		
		playNote(NOTE7C);   _delay_ms(SEMIQUAVER);
    13c6:	8c e3       	ldi	r24, 0x3C	; 60
    13c8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    13cc:	8c e4       	ldi	r24, 0x4C	; 76
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	fe 01       	movw	r30, r28
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <paschaOvo+0xa34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	d9 f7       	brne	.-10     	; 0x13d0 <paschaOvo+0xa32>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    13da:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    13de:	5b 98       	cbi	0x0b, 3	; 11
    13e0:	84 ee       	ldi	r24, 0xE4	; 228
    13e2:	9c e0       	ldi	r25, 0x0C	; 12
    13e4:	fe 01       	movw	r30, r28
    13e6:	31 97       	sbiw	r30, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <paschaOvo+0xa48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	d9 f7       	brne	.-10     	; 0x13e4 <paschaOvo+0xa46>
		playNote(NOTE6AS);  _delay_ms(MINIM + CROTCHET);
		playNote(NOTE7CS);  _delay_ms(CROTCHET);
		
		playNote(NOTE7C);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE6A);   _delay_ms(MINIM);
    13ee:	87 e4       	ldi	r24, 0x47	; 71
    13f0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    13f4:	80 e6       	ldi	r24, 0x60	; 96
    13f6:	92 e2       	ldi	r25, 0x22	; 34
    13f8:	fe 01       	movw	r30, r28
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <paschaOvo+0xa5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	d9 f7       	brne	.-10     	; 0x13f8 <paschaOvo+0xa5a>
		playNote(NOTE6F);   _delay_ms(CROTCHET);
    1402:	89 e5       	ldi	r24, 0x59	; 89
    1404:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1408:	80 e3       	ldi	r24, 0x30	; 48
    140a:	91 e1       	ldi	r25, 0x11	; 17
    140c:	fe 01       	movw	r30, r28
    140e:	31 97       	sbiw	r30, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <paschaOvo+0xa70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1412:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	d9 f7       	brne	.-10     	; 0x140c <paschaOvo+0xa6e>
		
		playNote(NOTE6FS);  _delay_ms(MINIM + CROTCHET);
    1416:	84 e5       	ldi	r24, 0x54	; 84
    1418:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    141c:	80 e9       	ldi	r24, 0x90	; 144
    141e:	93 e3       	ldi	r25, 0x33	; 51
    1420:	fe 01       	movw	r30, r28
    1422:	31 97       	sbiw	r30, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <paschaOvo+0xa84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	d9 f7       	brne	.-10     	; 0x1420 <paschaOvo+0xa82>
		playNote(NOTE6AS);  _delay_ms(CROTCHET);
    142a:	83 e4       	ldi	r24, 0x43	; 67
    142c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1430:	80 e3       	ldi	r24, 0x30	; 48
    1432:	91 e1       	ldi	r25, 0x11	; 17
    1434:	fe 01       	movw	r30, r28
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <paschaOvo+0xa98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	d9 f7       	brne	.-10     	; 0x1434 <paschaOvo+0xa96>
		
		playNote(NOTE6A);   _delay_ms(SEMIQUAVER);
    143e:	87 e4       	ldi	r24, 0x47	; 71
    1440:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1444:	8c e4       	ldi	r24, 0x4C	; 76
    1446:	94 e0       	ldi	r25, 0x04	; 4
    1448:	fe 01       	movw	r30, r28
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <paschaOvo+0xaac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	d9 f7       	brne	.-10     	; 0x1448 <paschaOvo+0xaaa>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    1452:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    1456:	5b 98       	cbi	0x0b, 3	; 11
    1458:	84 ee       	ldi	r24, 0xE4	; 228
    145a:	9c e0       	ldi	r25, 0x0C	; 12
    145c:	fe 01       	movw	r30, r28
    145e:	31 97       	sbiw	r30, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <paschaOvo+0xac0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	d9 f7       	brne	.-10     	; 0x145c <paschaOvo+0xabe>
		playNote(NOTE6FS);  _delay_ms(MINIM + CROTCHET);
		playNote(NOTE6AS);  _delay_ms(CROTCHET);
		
		playNote(NOTE6A);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
    1466:	89 e5       	ldi	r24, 0x59	; 89
    1468:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    146c:	88 e9       	ldi	r24, 0x98	; 152
    146e:	91 e2       	ldi	r25, 0x21	; 33
    1470:	fe 01       	movw	r30, r28
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <paschaOvo+0xad4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	d9 f7       	brne	.-10     	; 0x1470 <paschaOvo+0xad2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    147a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    147e:	5b 98       	cbi	0x0b, 3	; 11
    1480:	c8 01       	movw	r24, r16
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <paschaOvo+0xae4>
		
		playNote(NOTE6A);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE6F);   _delay_ms(MINIM - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE6F);   _delay_ms(CROTCHET);
    1486:	89 e5       	ldi	r24, 0x59	; 89
    1488:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	91 e1       	ldi	r25, 0x11	; 17
    1490:	fe 01       	movw	r30, r28
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <paschaOvo+0xaf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1498:	d9 f7       	brne	.-10     	; 0x1490 <paschaOvo+0xaf2>
		
		playNote(NOTE6FS);  _delay_ms(MINIM + CROTCHET);
    149a:	84 e5       	ldi	r24, 0x54	; 84
    149c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    14a0:	80 e9       	ldi	r24, 0x90	; 144
    14a2:	93 e3       	ldi	r25, 0x33	; 51
    14a4:	fe 01       	movw	r30, r28
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <paschaOvo+0xb08>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	d9 f7       	brne	.-10     	; 0x14a4 <paschaOvo+0xb06>
		playNote(NOTE6AS);  _delay_ms(CROTCHET);
    14ae:	83 e4       	ldi	r24, 0x43	; 67
    14b0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	91 e1       	ldi	r25, 0x11	; 17
    14b8:	fe 01       	movw	r30, r28
    14ba:	31 97       	sbiw	r30, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <paschaOvo+0xb1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c0:	d9 f7       	brne	.-10     	; 0x14b8 <paschaOvo+0xb1a>
		
		playNote(NOTE6A);   _delay_ms(SEMIQUAVER);
    14c2:	87 e4       	ldi	r24, 0x47	; 71
    14c4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    14c8:	8c e4       	ldi	r24, 0x4C	; 76
    14ca:	94 e0       	ldi	r25, 0x04	; 4
    14cc:	fe 01       	movw	r30, r28
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <paschaOvo+0xb30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	d9 f7       	brne	.-10     	; 0x14cc <paschaOvo+0xb2e>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    14d6:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    14da:	5b 98       	cbi	0x0b, 3	; 11
    14dc:	84 ee       	ldi	r24, 0xE4	; 228
    14de:	9c e0       	ldi	r25, 0x0C	; 12
    14e0:	fe 01       	movw	r30, r28
    14e2:	31 97       	sbiw	r30, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <paschaOvo+0xb44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	d9 f7       	brne	.-10     	; 0x14e0 <paschaOvo+0xb42>
		playNote(NOTE6FS);  _delay_ms(MINIM + CROTCHET);
		playNote(NOTE6AS);  _delay_ms(CROTCHET);
		
		playNote(NOTE6A);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE6F);   _delay_ms(MINIM);
    14ea:	89 e5       	ldi	r24, 0x59	; 89
    14ec:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    14f0:	80 e6       	ldi	r24, 0x60	; 96
    14f2:	92 e2       	ldi	r25, 0x22	; 34
    14f4:	fe 01       	movw	r30, r28
    14f6:	31 97       	sbiw	r30, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <paschaOvo+0xb58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	d9 f7       	brne	.-10     	; 0x14f4 <paschaOvo+0xb56>
		playNote(NOTE6D);   _delay_ms(CROTCHET);
    14fe:	8a e6       	ldi	r24, 0x6A	; 106
    1500:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1504:	80 e3       	ldi	r24, 0x30	; 48
    1506:	91 e1       	ldi	r25, 0x11	; 17
    1508:	fe 01       	movw	r30, r28
    150a:	31 97       	sbiw	r30, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <paschaOvo+0xb6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	d9 f7       	brne	.-10     	; 0x1508 <paschaOvo+0xb6a>
		
		playNote(NOTE6DS);  _delay_ms(MINIM + CROTCHET);
    1512:	84 e6       	ldi	r24, 0x64	; 100
    1514:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1518:	80 e9       	ldi	r24, 0x90	; 144
    151a:	93 e3       	ldi	r25, 0x33	; 51
    151c:	fe 01       	movw	r30, r28
    151e:	31 97       	sbiw	r30, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <paschaOvo+0xb80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	d9 f7       	brne	.-10     	; 0x151c <paschaOvo+0xb7e>
		playNote(NOTE6FS);  _delay_ms(CROTCHET);
    1526:	84 e5       	ldi	r24, 0x54	; 84
    1528:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	91 e1       	ldi	r25, 0x11	; 17
    1530:	fe 01       	movw	r30, r28
    1532:	31 97       	sbiw	r30, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <paschaOvo+0xb94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	d9 f7       	brne	.-10     	; 0x1530 <paschaOvo+0xb92>
		
		playNote(NOTE6F);   _delay_ms(SEMIQUAVER);
    153a:	89 e5       	ldi	r24, 0x59	; 89
    153c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1540:	8c e4       	ldi	r24, 0x4C	; 76
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	fe 01       	movw	r30, r28
    1546:	31 97       	sbiw	r30, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <paschaOvo+0xba8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	d9 f7       	brne	.-10     	; 0x1544 <paschaOvo+0xba6>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    154e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    1552:	5b 98       	cbi	0x0b, 3	; 11
    1554:	84 ee       	ldi	r24, 0xE4	; 228
    1556:	9c e0       	ldi	r25, 0x0C	; 12
    1558:	fe 01       	movw	r30, r28
    155a:	31 97       	sbiw	r30, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <paschaOvo+0xbbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1560:	d9 f7       	brne	.-10     	; 0x1558 <paschaOvo+0xbba>
		playNote(NOTE6DS);  _delay_ms(MINIM + CROTCHET);
		playNote(NOTE6FS);  _delay_ms(CROTCHET);
		
		playNote(NOTE6F);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER + QUAVER);
		playNote(NOTE6CS);  _delay_ms(MINIM);
    1562:	81 e7       	ldi	r24, 0x71	; 113
    1564:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1568:	80 e6       	ldi	r24, 0x60	; 96
    156a:	92 e2       	ldi	r25, 0x22	; 34
    156c:	fe 01       	movw	r30, r28
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <paschaOvo+0xbd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	d9 f7       	brne	.-10     	; 0x156c <paschaOvo+0xbce>
		playNote(NOTE5AS);  _delay_ms(CROTCHET);
    1576:	86 e8       	ldi	r24, 0x86	; 134
    1578:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    157c:	80 e3       	ldi	r24, 0x30	; 48
    157e:	91 e1       	ldi	r25, 0x11	; 17
    1580:	fe 01       	movw	r30, r28
    1582:	31 97       	sbiw	r30, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <paschaOvo+0xbe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	d9 f7       	brne	.-10     	; 0x1580 <paschaOvo+0xbe2>
		
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
    158a:	87 e7       	ldi	r24, 0x77	; 119
    158c:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1590:	8c e4       	ldi	r24, 0x4C	; 76
    1592:	94 e0       	ldi	r25, 0x04	; 4
    1594:	fe 01       	movw	r30, r28
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <paschaOvo+0xbf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	d9 f7       	brne	.-10     	; 0x1594 <paschaOvo+0xbf6>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    159e:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    15a2:	5b 98       	cbi	0x0b, 3	; 11
    15a4:	8c e4       	ldi	r24, 0x4C	; 76
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	fe 01       	movw	r30, r28
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <paschaOvo+0xc0c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	d9 f7       	brne	.-10     	; 0x15a8 <paschaOvo+0xc0a>
		playNote(NOTE6CS);  _delay_ms(MINIM);
		playNote(NOTE5AS);  _delay_ms(CROTCHET);
		
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
		stopNote();         _delay_ms(SEMIQUAVER);
		playNote(NOTE6C);   _delay_ms(SEMIQUAVER);
    15b2:	87 e7       	ldi	r24, 0x77	; 119
    15b4:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    15b8:	8c e4       	ldi	r24, 0x4C	; 76
    15ba:	94 e0       	ldi	r25, 0x04	; 4
    15bc:	fe 01       	movw	r30, r28
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <paschaOvo+0xc20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c4:	d9 f7       	brne	.-10     	; 0x15bc <paschaOvo+0xc1e>
		playNote(NOTE6D);   _delay_ms(SEMIQUAVER);
    15c6:	8a e6       	ldi	r24, 0x6A	; 106
    15c8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    15cc:	8c e4       	ldi	r24, 0x4C	; 76
    15ce:	94 e0       	ldi	r25, 0x04	; 4
    15d0:	fe 01       	movw	r30, r28
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <paschaOvo+0xc34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	d9 f7       	brne	.-10     	; 0x15d0 <paschaOvo+0xc32>
		playNote(NOTE6E);   _delay_ms(MINIM);
    15da:	8f e5       	ldi	r24, 0x5F	; 95
    15dc:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    15e0:	80 e6       	ldi	r24, 0x60	; 96
    15e2:	92 e2       	ldi	r25, 0x22	; 34
    15e4:	fe 01       	movw	r30, r28
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <paschaOvo+0xc48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	d9 f7       	brne	.-10     	; 0x15e4 <paschaOvo+0xc46>
		playNote(NOTE6G);   _delay_ms(CROTCHET);
    15ee:	80 e5       	ldi	r24, 0x50	; 80
    15f0:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    15f4:	80 e3       	ldi	r24, 0x30	; 48
    15f6:	91 e1       	ldi	r25, 0x11	; 17
    15f8:	fe 01       	movw	r30, r28
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <paschaOvo+0xc5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	d9 f7       	brne	.-10     	; 0x15f8 <paschaOvo+0xc5a>
		
		playNote(NOTE6F);   _delay_ms(QUAVER);
    1602:	89 e5       	ldi	r24, 0x59	; 89
    1604:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    1608:	88 e9       	ldi	r24, 0x98	; 152
    160a:	98 e0       	ldi	r25, 0x08	; 8
    160c:	fe 01       	movw	r30, r28
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <paschaOvo+0xc70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	d9 f7       	brne	.-10     	; 0x160c <paschaOvo+0xc6e>
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1616:	83 eb       	ldi	r24, 0xB3	; 179
    1618:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    161c:	84 e8       	ldi	r24, 0x84	; 132
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	fe 01       	movw	r30, r28
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <paschaOvo+0xc84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1628:	d9 f7       	brne	.-10     	; 0x1620 <paschaOvo+0xc82>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    162a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    162e:	5b 98       	cbi	0x0b, 3	; 11
    1630:	c8 01       	movw	r24, r16
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <paschaOvo+0xc94>
		playNote(NOTE6G);   _delay_ms(CROTCHET);
		
		playNote(NOTE6F);   _delay_ms(QUAVER);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1636:	83 eb       	ldi	r24, 0xB3	; 179
    1638:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    163c:	84 e8       	ldi	r24, 0x84	; 132
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	fe 01       	movw	r30, r28
    1642:	31 97       	sbiw	r30, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <paschaOvo+0xca4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	d9 f7       	brne	.-10     	; 0x1640 <paschaOvo+0xca2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    164a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    164e:	5b 98       	cbi	0x0b, 3	; 11
    1650:	c8 01       	movw	r24, r16
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <paschaOvo+0xcb4>
		playNote(NOTE6F);   _delay_ms(QUAVER);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1656:	83 eb       	ldi	r24, 0xB3	; 179
    1658:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    165c:	80 ed       	ldi	r24, 0xD0	; 208
    165e:	97 e0       	ldi	r25, 0x07	; 7
    1660:	fe 01       	movw	r30, r28
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <paschaOvo+0xcc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	d9 f7       	brne	.-10     	; 0x1660 <paschaOvo+0xcc2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    166a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    166e:	5b 98       	cbi	0x0b, 3	; 11
    1670:	c8 01       	movw	r24, r16
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <paschaOvo+0xcd4>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1676:	83 eb       	ldi	r24, 0xB3	; 179
    1678:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    167c:	84 e8       	ldi	r24, 0x84	; 132
    167e:	93 e0       	ldi	r25, 0x03	; 3
    1680:	fe 01       	movw	r30, r28
    1682:	31 97       	sbiw	r30, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <paschaOvo+0xce4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	d9 f7       	brne	.-10     	; 0x1680 <paschaOvo+0xce2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    168a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    168e:	5b 98       	cbi	0x0b, 3	; 11
    1690:	c8 01       	movw	r24, r16
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <paschaOvo+0xcf4>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    1696:	83 eb       	ldi	r24, 0xB3	; 179
    1698:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    169c:	84 e8       	ldi	r24, 0x84	; 132
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	fe 01       	movw	r30, r28
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <paschaOvo+0xd04>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	d9 f7       	brne	.-10     	; 0x16a0 <paschaOvo+0xd02>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    16aa:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    16ae:	5b 98       	cbi	0x0b, 3	; 11
    16b0:	c8 01       	movw	r24, r16
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <paschaOvo+0xd14>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    16b6:	83 eb       	ldi	r24, 0xB3	; 179
    16b8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    16bc:	80 ed       	ldi	r24, 0xD0	; 208
    16be:	97 e0       	ldi	r25, 0x07	; 7
    16c0:	fe 01       	movw	r30, r28
    16c2:	31 97       	sbiw	r30, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <paschaOvo+0xd24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	d9 f7       	brne	.-10     	; 0x16c0 <paschaOvo+0xd22>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    16ca:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    16ce:	5b 98       	cbi	0x0b, 3	; 11
    16d0:	c8 01       	movw	r24, r16
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <paschaOvo+0xd34>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    16d6:	83 eb       	ldi	r24, 0xB3	; 179
    16d8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    16dc:	84 e8       	ldi	r24, 0x84	; 132
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	fe 01       	movw	r30, r28
    16e2:	31 97       	sbiw	r30, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <paschaOvo+0xd44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	d9 f7       	brne	.-10     	; 0x16e0 <paschaOvo+0xd42>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    16ea:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    16ee:	5b 98       	cbi	0x0b, 3	; 11
    16f0:	c8 01       	movw	r24, r16
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <paschaOvo+0xd54>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
    16f6:	83 eb       	ldi	r24, 0xB3	; 179
    16f8:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    16fc:	84 e8       	ldi	r24, 0x84	; 132
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	fe 01       	movw	r30, r28
    1702:	31 97       	sbiw	r30, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <paschaOvo+0xd64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1706:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	d9 f7       	brne	.-10     	; 0x1700 <paschaOvo+0xd62>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    170a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    170e:	5b 98       	cbi	0x0b, 3	; 11
    1710:	c8 01       	movw	r24, r16
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <paschaOvo+0xd74>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1716:	83 eb       	ldi	r24, 0xB3	; 179
    1718:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    171c:	80 ed       	ldi	r24, 0xD0	; 208
    171e:	97 e0       	ldi	r25, 0x07	; 7
    1720:	fe 01       	movw	r30, r28
    1722:	31 97       	sbiw	r30, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <paschaOvo+0xd84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	d9 f7       	brne	.-10     	; 0x1720 <paschaOvo+0xd82>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    172a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    172e:	5b 98       	cbi	0x0b, 3	; 11
    1730:	c8 01       	movw	r24, r16
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <paschaOvo+0xd94>
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(SEMIQUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
		stopNote();         _delay_ms(GAP);
		playNote(NOTE5F);   _delay_ms(QUAVER - GAP);
    1736:	83 eb       	ldi	r24, 0xB3	; 179
    1738:	0e 94 bc 04 	call	0x978	; 0x978 <playNote>
    173c:	80 ed       	ldi	r24, 0xD0	; 208
    173e:	97 e0       	ldi	r25, 0x07	; 7
    1740:	fe 01       	movw	r30, r28
    1742:	31 97       	sbiw	r30, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <paschaOvo+0xda4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	d9 f7       	brne	.-10     	; 0x1740 <paschaOvo+0xda2>
uint8_t noteCounter;
uint8_t noteInterruptable;
uint8_t mute;

void stopNote(void) {
	TCCR2A = 0x00; // disconnect OC2B
    174a:	10 92 b0 00 	sts	0x00B0, r1
	PORTD &= ~0x08; // set low
    174e:	5b 98       	cbi	0x0b, 3	; 11
    1750:	c8 01       	movw	r24, r16
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <paschaOvo+0xdb4>
    1756:	f9 ca       	rjmp	.-2574   	; 0xd4a <paschaOvo+0x3ac>

00001758 <spektrumInit>:



void spektrumInit(void)
{
	UBRR0L = 3;  UBRR0H = 0;  // Baud at 125000 baud
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	80 93 c4 00 	sts	0x00C4, r24
    175e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0C = 0x06; // Async mode, 8N1
    1762:	86 e0       	ldi	r24, 0x06	; 6
    1764:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = 0x08; // TX enable
    1768:	88 e0       	ldi	r24, 0x08	; 8
    176a:	80 93 c1 00 	sts	0x00C1, r24
}
    176e:	08 95       	ret

00001770 <spektrumSend>:

// this does DSMX mode only! DSM2 is not (yet) implemented, but DSMX works with cheapo RX
void spektrumSend(uint16_t chs[6], bool bind, bool rangecheck) // the spektrum channel reaches from 0x0000 to 0x03ff (1024 bit) usable range is 162..862
{
    1770:	9c 01       	movw	r18, r24
	if(bind)
    1772:	66 23       	and	r22, r22
    1774:	61 f1       	breq	.+88     	; 0x17ce <spektrumSend+0x5e>
	{
		uartBuffer[0] = 0x98;
    1776:	88 e9       	ldi	r24, 0x98	; 152
    1778:	80 93 1e 01 	sts	0x011E, r24
		uartBuffer[1] = 0x00;
    177c:	10 92 1f 01 	sts	0x011F, r1
		uartBuffer[2] = 0x00;
    1780:	10 92 20 01 	sts	0x0120, r1
		uartBuffer[3] = 0x00;
    1784:	10 92 21 01 	sts	0x0121, r1
		uartBuffer[4] = 0x05;
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	80 93 22 01 	sts	0x0122, r24
		uartBuffer[5] = 0xff;
    178e:	9f ef       	ldi	r25, 0xFF	; 255
    1790:	90 93 23 01 	sts	0x0123, r25
		uartBuffer[6] = 0x09;
    1794:	89 e0       	ldi	r24, 0x09	; 9
    1796:	80 93 24 01 	sts	0x0124, r24
		uartBuffer[7] = 0xff;
    179a:	90 93 25 01 	sts	0x0125, r25
		uartBuffer[8] = 0x0d;
    179e:	8d e0       	ldi	r24, 0x0D	; 13
    17a0:	80 93 26 01 	sts	0x0126, r24
		uartBuffer[9] = 0xff;
    17a4:	90 93 27 01 	sts	0x0127, r25
		uartBuffer[10] = 0x10;
    17a8:	80 e1       	ldi	r24, 0x10	; 16
    17aa:	80 93 28 01 	sts	0x0128, r24
		uartBuffer[11] = 0xaa;
    17ae:	9a ea       	ldi	r25, 0xAA	; 170
    17b0:	90 93 29 01 	sts	0x0129, r25
		uartBuffer[12] = 0x14;
    17b4:	84 e1       	ldi	r24, 0x14	; 20
    17b6:	80 93 2a 01 	sts	0x012A, r24
		uartBuffer[13] = 0xaa;
    17ba:	90 93 2b 01 	sts	0x012B, r25
		uartCounter = 0;
    17be:	10 92 1c 01 	sts	0x011C, r1
		uartLength = 14;
    17c2:	8e e0       	ldi	r24, 0x0E	; 14
    17c4:	80 93 1d 01 	sts	0x011D, r24
    17c8:	90 91 1c 01 	lds	r25, 0x011C
    17cc:	27 c0       	rjmp	.+78     	; 0x181c <spektrumSend+0xac>
	}
	else
	{
		uartBuffer[0] = 0x18;
    17ce:	88 e1       	ldi	r24, 0x18	; 24
    17d0:	80 93 1e 01 	sts	0x011E, r24
		if(rangecheck) uartBuffer[0] = 0x38; // in range check mode
    17d4:	44 23       	and	r20, r20
    17d6:	19 f0       	breq	.+6      	; 0x17de <spektrumSend+0x6e>
    17d8:	88 e3       	ldi	r24, 0x38	; 56
    17da:	80 93 1e 01 	sts	0x011E, r24
	
		uartBuffer[1] = 0x00;
    17de:	10 92 1f 01 	sts	0x011F, r1
    17e2:	d9 01       	movw	r26, r18
    17e4:	e0 e2       	ldi	r30, 0x20	; 32
    17e6:	f1 e0       	ldi	r31, 0x01	; 1
	
		for(uint8_t i = 0;i<6;i++)
		{
			uartBuffer[i*2+2] = 0x00 | ((chs[i] >> 8) & 0x03);
    17e8:	9c 91       	ld	r25, X
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	8c 91       	ld	r24, X
    17ee:	11 97       	sbiw	r26, 0x01	; 1
    17f0:	83 70       	andi	r24, 0x03	; 3
    17f2:	80 83       	st	Z, r24
			uartBuffer[i*2+3] = ((chs[i]) & 0xff);
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	12 96       	adiw	r26, 0x02	; 2
    17f8:	32 96       	adiw	r30, 0x02	; 2
		uartBuffer[0] = 0x18;
		if(rangecheck) uartBuffer[0] = 0x38; // in range check mode
	
		uartBuffer[1] = 0x00;
	
		for(uint8_t i = 0;i<6;i++)
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	ec 32       	cpi	r30, 0x2C	; 44
    17fe:	f8 07       	cpc	r31, r24
    1800:	99 f7       	brne	.-26     	; 0x17e8 <spektrumSend+0x78>
    1802:	dd cf       	rjmp	.-70     	; 0x17be <spektrumSend+0x4e>
		uartCounter = 0;
		uartLength = 14;
	}
	
	while(uartCounter < uartLength) {
		while((UCSR0A & 0x20) == 0);
    1804:	80 91 c0 00 	lds	r24, 0x00C0
    1808:	85 ff       	sbrs	r24, 5
    180a:	fc cf       	rjmp	.-8      	; 0x1804 <spektrumSend+0x94>
		UDR0 = uartBuffer[uartCounter++];
    180c:	e9 2f       	mov	r30, r25
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	e2 5e       	subi	r30, 0xE2	; 226
    1812:	fe 4f       	sbci	r31, 0xFE	; 254
    1814:	80 81       	ld	r24, Z
    1816:	80 93 c6 00 	sts	0x00C6, r24
    181a:	9f 5f       	subi	r25, 0xFF	; 255
		}
		uartCounter = 0;
		uartLength = 14;
	}
	
	while(uartCounter < uartLength) {
    181c:	9e 30       	cpi	r25, 0x0E	; 14
    181e:	90 f3       	brcs	.-28     	; 0x1804 <spektrumSend+0x94>
    1820:	90 93 1c 01 	sts	0x011C, r25
		while((UCSR0A & 0x20) == 0);
		UDR0 = uartBuffer[uartCounter++];
	}
	
}
    1824:	08 95       	ret

00001826 <stickADCgetCh>:
}

uint16_t stickADCgetCh(uint8_t ch)
{
	// Get stick inputs
	uint8_t mux = 0x40 | ch;
    1826:	80 64       	ori	r24, 0x40	; 64
	ADMUX = mux;   // select chan
    1828:	80 93 7c 00 	sts	0x007C, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    182c:	85 e3       	ldi	r24, 0x35	; 53
    182e:	8a 95       	dec	r24
    1830:	f1 f7       	brne	.-4      	; 0x182e <stickADCgetCh+0x8>
	_delay_us(20); // wait for mux to switch
	ADCSRA |= 0x40; // start
    1832:	80 91 7a 00 	lds	r24, 0x007A
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0x40); // wait for completion
    183c:	80 91 7a 00 	lds	r24, 0x007A
    1840:	86 fd       	sbrc	r24, 6
    1842:	fc cf       	rjmp	.-8      	; 0x183c <stickADCgetCh+0x16>
	return ADC;
    1844:	20 91 78 00 	lds	r18, 0x0078
    1848:	30 91 79 00 	lds	r19, 0x0079
}
    184c:	c9 01       	movw	r24, r18
    184e:	08 95       	ret

00001850 <stickGetRawADC>:

void stickGetRawADC(int16_t* _pChannels)
{
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	7c 01       	movw	r14, r24
	// Get stick inputs
	_pChannels[0] += stickADCgetCh(7);	// select chan 7 Throttle // fixme define mode 1/2
    185a:	fc 01       	movw	r30, r24
    185c:	00 81       	ld	r16, Z
    185e:	11 81       	ldd	r17, Z+1	; 0x01
    1860:	87 e0       	ldi	r24, 0x07	; 7
    1862:	0e 94 13 0c 	call	0x1826	; 0x1826 <stickADCgetCh>
    1866:	08 0f       	add	r16, r24
    1868:	19 1f       	adc	r17, r25
    186a:	f7 01       	movw	r30, r14
    186c:	11 83       	std	Z+1, r17	; 0x01
    186e:	00 83       	st	Z, r16
	_pChannels[3] += stickADCgetCh(3);	// select chan 3 Rudder
    1870:	06 81       	ldd	r16, Z+6	; 0x06
    1872:	17 81       	ldd	r17, Z+7	; 0x07
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	0e 94 13 0c 	call	0x1826	; 0x1826 <stickADCgetCh>
    187a:	08 0f       	add	r16, r24
    187c:	19 1f       	adc	r17, r25
    187e:	f7 01       	movw	r30, r14
    1880:	17 83       	std	Z+7, r17	; 0x07
    1882:	06 83       	std	Z+6, r16	; 0x06
	_pChannels[2] += stickADCgetCh(4);	// select chan 4 Elevator
    1884:	04 81       	ldd	r16, Z+4	; 0x04
    1886:	15 81       	ldd	r17, Z+5	; 0x05
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	0e 94 13 0c 	call	0x1826	; 0x1826 <stickADCgetCh>
    188e:	08 0f       	add	r16, r24
    1890:	19 1f       	adc	r17, r25
    1892:	f7 01       	movw	r30, r14
    1894:	15 83       	std	Z+5, r17	; 0x05
    1896:	04 83       	std	Z+4, r16	; 0x04
	_pChannels[1] += stickADCgetCh(5);    // select chan 5 Aileron
    1898:	02 81       	ldd	r16, Z+2	; 0x02
    189a:	13 81       	ldd	r17, Z+3	; 0x03
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	0e 94 13 0c 	call	0x1826	; 0x1826 <stickADCgetCh>
    18a2:	08 0f       	add	r16, r24
    18a4:	19 1f       	adc	r17, r25
    18a6:	f7 01       	movw	r30, r14
    18a8:	13 83       	std	Z+3, r17	; 0x03
    18aa:	02 83       	std	Z+2, r16	; 0x02
}
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	08 95       	ret

000018b6 <ScaleStick>:

#define GAIN 1550

int16_t ScaleStick(int16_t ch)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	28 97       	sbiw	r28, 0x08	; 8
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
	volatile int32_t a = ch;
    18ca:	aa 27       	eor	r26, r26
    18cc:	97 fd       	sbrc	r25, 7
    18ce:	a0 95       	com	r26
    18d0:	ba 2f       	mov	r27, r26
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	ab 83       	std	Y+3, r26	; 0x03
    18d8:	bc 83       	std	Y+4, r27	; 0x04
	volatile int32_t b;
	int16_t r = 0;
	
	b = a*GAIN;
    18da:	69 81       	ldd	r22, Y+1	; 0x01
    18dc:	7a 81       	ldd	r23, Y+2	; 0x02
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	2e e0       	ldi	r18, 0x0E	; 14
    18e4:	36 e0       	ldi	r19, 0x06	; 6
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsi3>
    18ee:	6d 83       	std	Y+5, r22	; 0x05
    18f0:	7e 83       	std	Y+6, r23	; 0x06
    18f2:	8f 83       	std	Y+7, r24	; 0x07
    18f4:	98 87       	std	Y+8, r25	; 0x08
	a = b/1000;
    18f6:	6d 81       	ldd	r22, Y+5	; 0x05
    18f8:	7e 81       	ldd	r23, Y+6	; 0x06
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	28 ee       	ldi	r18, 0xE8	; 232
    1900:	33 e0       	ldi	r19, 0x03	; 3
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divmodsi4>
    190a:	c9 01       	movw	r24, r18
    190c:	da 01       	movw	r26, r20
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	ab 83       	std	Y+3, r26	; 0x03
    1914:	bc 83       	std	Y+4, r27	; 0x04
	r = a;
    1916:	29 81       	ldd	r18, Y+1	; 0x01
    1918:	3a 81       	ldd	r19, Y+2	; 0x02
    191a:	4b 81       	ldd	r20, Y+3	; 0x03
    191c:	5c 81       	ldd	r21, Y+4	; 0x04

	return r;
}
    191e:	c9 01       	movw	r24, r18
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <stickLimit>:

int16_t stickLimit(int16_t b)
{
    1932:	24 e0       	ldi	r18, 0x04	; 4
    1934:	80 30       	cpi	r24, 0x00	; 0
    1936:	92 07       	cpc	r25, r18
    1938:	14 f0       	brlt	.+4      	; 0x193e <stickLimit+0xc>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	9c 01       	movw	r18, r24
    1940:	97 ff       	sbrs	r25, 7
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <stickLimit+0x16>
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
		if(b < 0) return 0;
		if(b > 1023) return 1023;
		return b;
}
    1948:	c9 01       	movw	r24, r18
    194a:	08 95       	ret

0000194c <sticksProcessRaw>:

void sticksProcessRaw(int16_t* _pChannels)
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	8c 01       	movw	r16, r24
    1956:	cb e5       	ldi	r28, 0x5B	; 91
    1958:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t i=0;i<4;i++)
	{
		int16_t c = _pChannels[i] / OVERSAMPLE;
		_pChannels[i] = ScaleStick(c);
    195a:	f8 01       	movw	r30, r16
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	6b e0       	ldi	r22, 0x0B	; 11
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__divmodhi4>
    1968:	cb 01       	movw	r24, r22
    196a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <ScaleStick>

		// compensate for center offset
		_pChannels[i] +=SPEKTRUM_med;
    196e:	80 50       	subi	r24, 0x00	; 0
    1970:	9e 4f       	sbci	r25, 0xFE	; 254
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	28 81       	ld	r18, Y
    197a:	39 81       	ldd	r19, Y+1	; 0x01
    197c:	82 1b       	sub	r24, r18
    197e:	93 0b       	sbc	r25, r19
    1980:	f4 e0       	ldi	r31, 0x04	; 4
    1982:	80 30       	cpi	r24, 0x00	; 0
    1984:	9f 07       	cpc	r25, r31
    1986:	14 f0       	brlt	.+4      	; 0x198c <sticksProcessRaw+0x40>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	93 e0       	ldi	r25, 0x03	; 3
		_pChannels[i] -=stickCenter[i];

		// limit for next step
		_pChannels[i] = stickLimit(_pChannels[i]);
    198c:	97 ff       	sbrs	r25, 7
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <sticksProcessRaw+0x48>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	f8 01       	movw	r30, r16
    1996:	81 93       	st	Z+, r24
    1998:	91 93       	st	Z+, r25
    199a:	8f 01       	movw	r16, r30
    199c:	22 96       	adiw	r28, 0x02	; 2
		return b;
}

void sticksProcessRaw(int16_t* _pChannels)
{
	for(uint8_t i=0;i<4;i++)
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	c3 36       	cpi	r28, 0x63	; 99
    19a2:	df 07       	cpc	r29, r31
    19a4:	d1 f6       	brne	.-76     	; 0x195a <sticksProcessRaw+0xe>
		_pChannels[i] -=stickCenter[i];

		// limit for next step
		_pChannels[i] = stickLimit(_pChannels[i]);
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <stickCalibrate>:


extern void LEDOff(void);

void stickCalibrate(void)
{
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
	stopNote();
    19b6:	0e 94 96 04 	call	0x92c	; 0x92c <stopNote>
	
	uint8_t i;
	LEDOff();
    19ba:	0e 94 53 00 	call	0xa6	; 0xa6 <LEDOff>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c0:	48 ec       	ldi	r20, 0xC8	; 200
    19c2:	50 e0       	ldi	r21, 0x00	; 0
	
	for(i=0;i<10;i++)
	{
		LED0Tgl();
    19c4:	32 9a       	sbi	0x06, 2	; 6
    19c6:	88 eb       	ldi	r24, 0xB8	; 184
    19c8:	9b e0       	ldi	r25, 0x0B	; 11
    19ca:	fa 01       	movw	r30, r20
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <stickCalibrate+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	d9 f7       	brne	.-10     	; 0x19ca <stickCalibrate+0x1a>
		_delay_ms(300);
		
		if(i==3) LED1On();
    19d4:	23 30       	cpi	r18, 0x03	; 3
    19d6:	11 f4       	brne	.+4      	; 0x19dc <stickCalibrate+0x2c>
    19d8:	40 98       	cbi	0x08, 0	; 8
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <stickCalibrate+0x3a>
		if(i==6) LED2On();
    19dc:	26 30       	cpi	r18, 0x06	; 6
    19de:	11 f4       	brne	.+4      	; 0x19e4 <stickCalibrate+0x34>
    19e0:	41 98       	cbi	0x08, 1	; 8
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <stickCalibrate+0x3a>
		if(i==9) LED3On();
    19e4:	29 30       	cpi	r18, 0x09	; 9
    19e6:	09 f4       	brne	.+2      	; 0x19ea <stickCalibrate+0x3a>
    19e8:	58 98       	cbi	0x0b, 0	; 11
	stopNote();
	
	uint8_t i;
	LEDOff();
	
	for(i=0;i<10;i++)
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	2a 30       	cpi	r18, 0x0A	; 10
    19ee:	51 f7       	brne	.-44     	; 0x19c4 <stickCalibrate+0x14>
		if(i==6) LED2On();
		if(i==9) LED3On();

	}
	
	LEDOff();
    19f0:	0e 94 53 00 	call	0xa6	; 0xa6 <LEDOff>
	// simulate normal acquisition loop
	stickCenter[0]=0;
    19f4:	10 92 5c 01 	sts	0x015C, r1
    19f8:	10 92 5b 01 	sts	0x015B, r1
	stickCenter[1]=0;
    19fc:	10 92 5e 01 	sts	0x015E, r1
    1a00:	10 92 5d 01 	sts	0x015D, r1
	stickCenter[2]=0;
    1a04:	10 92 60 01 	sts	0x0160, r1
    1a08:	10 92 5f 01 	sts	0x015F, r1
	stickCenter[3]=0;
    1a0c:	10 92 62 01 	sts	0x0162, r1
    1a10:	10 92 61 01 	sts	0x0161, r1
    1a14:	10 e0       	ldi	r17, 0x00	; 0
    1a16:	c0 ea       	ldi	r28, 0xA0	; 160
    1a18:	df e0       	ldi	r29, 0x0F	; 15
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <stickCalibrate+0x6c>
	
	for(i=0;i<OVERSAMPLE;i++)
	{
		_delay_ms(2);
		stickGetRawADC(stickCenter);
    1a20:	8b e5       	ldi	r24, 0x5B	; 91
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	0e 94 28 0c 	call	0x1850	; 0x1850 <stickGetRawADC>
	stickCenter[0]=0;
	stickCenter[1]=0;
	stickCenter[2]=0;
	stickCenter[3]=0;
	
	for(i=0;i<OVERSAMPLE;i++)
    1a28:	1f 5f       	subi	r17, 0xFF	; 255
    1a2a:	1b 30       	cpi	r17, 0x0B	; 11
    1a2c:	b1 f7       	brne	.-20     	; 0x1a1a <stickCalibrate+0x6a>
    1a2e:	cb e5       	ldi	r28, 0x5B	; 91
    1a30:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	for(uint8_t i=0;i<4;i++)
	{
		int16_t c = stickCenter[i] / OVERSAMPLE;
		stickCenter[i] = ScaleStick(c);
    1a32:	88 81       	ld	r24, Y
    1a34:	99 81       	ldd	r25, Y+1	; 0x01
    1a36:	6b e0       	ldi	r22, 0x0B	; 11
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__divmodhi4>
    1a3e:	cb 01       	movw	r24, r22
    1a40:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <ScaleStick>
    1a44:	89 93       	st	Y+, r24
    1a46:	99 93       	st	Y+, r25
	{
		_delay_ms(2);
		stickGetRawADC(stickCenter);
	}
	
	for(uint8_t i=0;i<4;i++)
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	c3 36       	cpi	r28, 0x63	; 99
    1a4c:	d8 07       	cpc	r29, r24
    1a4e:	89 f7       	brne	.-30     	; 0x1a32 <stickCalibrate+0x82>
	{
		int16_t c = stickCenter[i] / OVERSAMPLE;
		stickCenter[i] = ScaleStick(c);
	}
	
	eeprom_update_block(stickCenter,(void*)0,sizeof(stickCenter));
    1a50:	ce 01       	movw	r24, r28
    1a52:	08 97       	sbiw	r24, 0x08	; 8
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	48 e0       	ldi	r20, 0x08	; 8
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__eeupd_block_m168>
// 	uint16_t max[4],min[4];
// 	for(i=0;i<4;i++)
// 	{
// 		
// 	}
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	08 95       	ret

00001a68 <stickInit>:

int16_t stickCenter[4];//,stickGain[4];

void stickInit(void)
{
	eeprom_read_block(stickCenter,(void*)0,sizeof(stickCenter));
    1a68:	8b e5       	ldi	r24, 0x5B	; 91
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	48 e0       	ldi	r20, 0x08	; 8
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__eerd_block_m168>
	//eeprom_read_block(stickGain,(void*)sizeof(stickCenter),sizeof(stickCenter));
	
	if(stickCenter[0]== (signed) 0xffff || stickCenter[0]==(signed) 0x0000)
    1a78:	80 91 5b 01 	lds	r24, 0x015B
    1a7c:	90 91 5c 01 	lds	r25, 0x015C
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	02 97       	sbiw	r24, 0x02	; 2
    1a84:	10 f4       	brcc	.+4      	; 0x1a8a <stickInit+0x22>
	{
		stickCalibrate(); // force calibration
    1a86:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <stickCalibrate>
    1a8a:	08 95       	ret

00001a8c <__mulsi3>:
    1a8c:	62 9f       	mul	r22, r18
    1a8e:	d0 01       	movw	r26, r0
    1a90:	73 9f       	mul	r23, r19
    1a92:	f0 01       	movw	r30, r0
    1a94:	82 9f       	mul	r24, r18
    1a96:	e0 0d       	add	r30, r0
    1a98:	f1 1d       	adc	r31, r1
    1a9a:	64 9f       	mul	r22, r20
    1a9c:	e0 0d       	add	r30, r0
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	92 9f       	mul	r25, r18
    1aa2:	f0 0d       	add	r31, r0
    1aa4:	83 9f       	mul	r24, r19
    1aa6:	f0 0d       	add	r31, r0
    1aa8:	74 9f       	mul	r23, r20
    1aaa:	f0 0d       	add	r31, r0
    1aac:	65 9f       	mul	r22, r21
    1aae:	f0 0d       	add	r31, r0
    1ab0:	99 27       	eor	r25, r25
    1ab2:	72 9f       	mul	r23, r18
    1ab4:	b0 0d       	add	r27, r0
    1ab6:	e1 1d       	adc	r30, r1
    1ab8:	f9 1f       	adc	r31, r25
    1aba:	63 9f       	mul	r22, r19
    1abc:	b0 0d       	add	r27, r0
    1abe:	e1 1d       	adc	r30, r1
    1ac0:	f9 1f       	adc	r31, r25
    1ac2:	bd 01       	movw	r22, r26
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 95       	ret

00001aca <__udivmodqi4>:
    1aca:	99 1b       	sub	r25, r25
    1acc:	79 e0       	ldi	r23, 0x09	; 9
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <__udivmodqi4_ep>

00001ad0 <__udivmodqi4_loop>:
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	96 17       	cp	r25, r22
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <__udivmodqi4_ep>
    1ad6:	96 1b       	sub	r25, r22

00001ad8 <__udivmodqi4_ep>:
    1ad8:	88 1f       	adc	r24, r24
    1ada:	7a 95       	dec	r23
    1adc:	c9 f7       	brne	.-14     	; 0x1ad0 <__udivmodqi4_loop>
    1ade:	80 95       	com	r24
    1ae0:	08 95       	ret

00001ae2 <__divmodhi4>:
    1ae2:	97 fb       	bst	r25, 7
    1ae4:	09 2e       	mov	r0, r25
    1ae6:	07 26       	eor	r0, r23
    1ae8:	0a d0       	rcall	.+20     	; 0x1afe <__divmodhi4_neg1>
    1aea:	77 fd       	sbrc	r23, 7
    1aec:	04 d0       	rcall	.+8      	; 0x1af6 <__divmodhi4_neg2>
    1aee:	27 d0       	rcall	.+78     	; 0x1b3e <__udivmodhi4>
    1af0:	06 d0       	rcall	.+12     	; 0x1afe <__divmodhi4_neg1>
    1af2:	00 20       	and	r0, r0
    1af4:	1a f4       	brpl	.+6      	; 0x1afc <__divmodhi4_exit>

00001af6 <__divmodhi4_neg2>:
    1af6:	70 95       	com	r23
    1af8:	61 95       	neg	r22
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255

00001afc <__divmodhi4_exit>:
    1afc:	08 95       	ret

00001afe <__divmodhi4_neg1>:
    1afe:	f6 f7       	brtc	.-4      	; 0x1afc <__divmodhi4_exit>
    1b00:	90 95       	com	r25
    1b02:	81 95       	neg	r24
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	08 95       	ret

00001b08 <__divmodsi4>:
    1b08:	97 fb       	bst	r25, 7
    1b0a:	09 2e       	mov	r0, r25
    1b0c:	05 26       	eor	r0, r21
    1b0e:	0e d0       	rcall	.+28     	; 0x1b2c <__divmodsi4_neg1>
    1b10:	57 fd       	sbrc	r21, 7
    1b12:	04 d0       	rcall	.+8      	; 0x1b1c <__divmodsi4_neg2>
    1b14:	28 d0       	rcall	.+80     	; 0x1b66 <__udivmodsi4>
    1b16:	0a d0       	rcall	.+20     	; 0x1b2c <__divmodsi4_neg1>
    1b18:	00 1c       	adc	r0, r0
    1b1a:	38 f4       	brcc	.+14     	; 0x1b2a <__divmodsi4_exit>

00001b1c <__divmodsi4_neg2>:
    1b1c:	50 95       	com	r21
    1b1e:	40 95       	com	r20
    1b20:	30 95       	com	r19
    1b22:	21 95       	neg	r18
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255

00001b2a <__divmodsi4_exit>:
    1b2a:	08 95       	ret

00001b2c <__divmodsi4_neg1>:
    1b2c:	f6 f7       	brtc	.-4      	; 0x1b2a <__divmodsi4_exit>
    1b2e:	90 95       	com	r25
    1b30:	80 95       	com	r24
    1b32:	70 95       	com	r23
    1b34:	61 95       	neg	r22
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	08 95       	ret

00001b3e <__udivmodhi4>:
    1b3e:	aa 1b       	sub	r26, r26
    1b40:	bb 1b       	sub	r27, r27
    1b42:	51 e1       	ldi	r21, 0x11	; 17
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <__udivmodhi4_ep>

00001b46 <__udivmodhi4_loop>:
    1b46:	aa 1f       	adc	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	a6 17       	cp	r26, r22
    1b4c:	b7 07       	cpc	r27, r23
    1b4e:	10 f0       	brcs	.+4      	; 0x1b54 <__udivmodhi4_ep>
    1b50:	a6 1b       	sub	r26, r22
    1b52:	b7 0b       	sbc	r27, r23

00001b54 <__udivmodhi4_ep>:
    1b54:	88 1f       	adc	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	5a 95       	dec	r21
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__udivmodhi4_loop>
    1b5c:	80 95       	com	r24
    1b5e:	90 95       	com	r25
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	08 95       	ret

00001b66 <__udivmodsi4>:
    1b66:	a1 e2       	ldi	r26, 0x21	; 33
    1b68:	1a 2e       	mov	r1, r26
    1b6a:	aa 1b       	sub	r26, r26
    1b6c:	bb 1b       	sub	r27, r27
    1b6e:	fd 01       	movw	r30, r26
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <__udivmodsi4_ep>

00001b72 <__udivmodsi4_loop>:
    1b72:	aa 1f       	adc	r26, r26
    1b74:	bb 1f       	adc	r27, r27
    1b76:	ee 1f       	adc	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	a2 17       	cp	r26, r18
    1b7c:	b3 07       	cpc	r27, r19
    1b7e:	e4 07       	cpc	r30, r20
    1b80:	f5 07       	cpc	r31, r21
    1b82:	20 f0       	brcs	.+8      	; 0x1b8c <__udivmodsi4_ep>
    1b84:	a2 1b       	sub	r26, r18
    1b86:	b3 0b       	sbc	r27, r19
    1b88:	e4 0b       	sbc	r30, r20
    1b8a:	f5 0b       	sbc	r31, r21

00001b8c <__udivmodsi4_ep>:
    1b8c:	66 1f       	adc	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	1a 94       	dec	r1
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <__udivmodsi4_loop>
    1b98:	60 95       	com	r22
    1b9a:	70 95       	com	r23
    1b9c:	80 95       	com	r24
    1b9e:	90 95       	com	r25
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	bd 01       	movw	r22, r26
    1ba6:	cf 01       	movw	r24, r30
    1ba8:	08 95       	ret

00001baa <__eerd_block_m168>:
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22

00001bae <__eerd_blraw_m168>:
    1bae:	fc 01       	movw	r30, r24
    1bb0:	f9 99       	sbic	0x1f, 1	; 31
    1bb2:	fe cf       	rjmp	.-4      	; 0x1bb0 <__eerd_blraw_m168+0x2>
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <__eerd_blraw_m168+0x14>
    1bb6:	f2 bd       	out	0x22, r31	; 34
    1bb8:	e1 bd       	out	0x21, r30	; 33
    1bba:	f8 9a       	sbi	0x1f, 0	; 31
    1bbc:	31 96       	adiw	r30, 0x01	; 1
    1bbe:	00 b4       	in	r0, 0x20	; 32
    1bc0:	0d 92       	st	X+, r0
    1bc2:	41 50       	subi	r20, 0x01	; 1
    1bc4:	50 40       	sbci	r21, 0x00	; 0
    1bc6:	b8 f7       	brcc	.-18     	; 0x1bb6 <__eerd_blraw_m168+0x8>
    1bc8:	08 95       	ret

00001bca <__eeupd_block_m168>:
    1bca:	dc 01       	movw	r26, r24
    1bcc:	a4 0f       	add	r26, r20
    1bce:	b5 1f       	adc	r27, r21
    1bd0:	41 50       	subi	r20, 0x01	; 1
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	48 f0       	brcs	.+18     	; 0x1be8 <__eeupd_block_m168+0x1e>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	84 0f       	add	r24, r20
    1bda:	95 1f       	adc	r25, r21
    1bdc:	2e 91       	ld	r18, -X
    1bde:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__eeupd_r18_m168>
    1be2:	41 50       	subi	r20, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	d0 f7       	brcc	.-12     	; 0x1bdc <__eeupd_block_m168+0x12>
    1be8:	08 95       	ret

00001bea <__eeupd_byte_m168>:
    1bea:	26 2f       	mov	r18, r22

00001bec <__eeupd_r18_m168>:
    1bec:	f9 99       	sbic	0x1f, 1	; 31
    1bee:	fe cf       	rjmp	.-4      	; 0x1bec <__eeupd_r18_m168>
    1bf0:	92 bd       	out	0x22, r25	; 34
    1bf2:	81 bd       	out	0x21, r24	; 33
    1bf4:	f8 9a       	sbi	0x1f, 0	; 31
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	00 b4       	in	r0, 0x20	; 32
    1bfa:	02 16       	cp	r0, r18
    1bfc:	39 f0       	breq	.+14     	; 0x1c0c <__eeupd_r18_m168+0x20>
    1bfe:	1f ba       	out	0x1f, r1	; 31
    1c00:	20 bd       	out	0x20, r18	; 32
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	fa 9a       	sbi	0x1f, 2	; 31
    1c08:	f9 9a       	sbi	0x1f, 1	; 31
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	08 95       	ret

00001c0e <_exit>:
    1c0e:	f8 94       	cli

00001c10 <__stop_program>:
    1c10:	ff cf       	rjmp	.-2      	; 0x1c10 <__stop_program>
